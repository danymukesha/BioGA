[{"path":"https://danymukesha.github.io/BioGA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Dany Mukesha Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/Introduction.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Introduction","text":"vignette, illustrate usage BioGA genetic algorithm optimization context high throughput genomic data analysis. showcase interoperability Bioconductor classes, demonstrating genetic algorithm optimization can seamlessly integrated existing genomics pipelines improved analysis interpretation. BioGA package provides comprehensive set functions genetic algorithm optimization tailored analyzing high throughput genomic data. vignette demonstrates usage BioGA context selecting best combination genes predicting certain trait, disease susceptibility.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/Introduction.html","id":"overview","dir":"Articles","previous_headings":"Getting Started","what":"Overview","title":"Introduction","text":"Genomic data refers genetic information stored organism’s DNA. includes sequence nucleotides (adenine, thymine, cytosine, guanine) make DNA molecules. Genomic data can provide valuable insights various biological processes, gene expression, genetic variation, evolutionary relationships. Genomic data context consist gene expression profiles measured across different individuals (e.g., patients). row genomic_data matrix represents gene, column represents patient sample. values matrix represent expression levels gene patient sample. ’s example genomic data: example, row represents gene (genomic feature), column represents sample. values matrix represent measurement gene expression, mRNA levels protein abundance, sample.","code":"Sample 1   Sample 2   Sample 3   Sample 4 Gene1    0.1        0.2        0.3        0.4 Gene2    1.2        1.3        1.4        1.5 Gene3    2.3        2.2        2.1        2.0"},{"path":"https://danymukesha.github.io/BioGA/articles/Introduction.html","id":"example-scenario","dir":"Articles","previous_headings":"Getting Started","what":"Example Scenario","title":"Introduction","text":"Consider example scenario using genetic algorithm optimization select best combination genes predicting certain trait, disease susceptibility. example, counts matrix representing counts gene expression levels across different samples. row corresponds gene, column corresponds sample. use SummarizedExperiment class store data, common Bioconductor class representing rectangular feature x sample data, RNAseq count matrices microarray data.","code":"# Load necessary packages library(BioGA) library(SummarizedExperiment) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians  # Define parameters num_genes <- 1000 num_samples <- 10  # Define parameters for genetic algorithm population_size <- 100 generations <- 20 mutation_rate <- 0.1  # Generate example genomic data using SummarizedExperiment counts <- matrix(rpois(num_genes * num_samples, lambda = 10),     nrow = num_genes ) rownames(counts) <- paste0(\"Gene\", 1:num_genes) colnames(counts) <- paste0(\"Sample\", 1:num_samples)  # Create SummarizedExperiment object se <- SummarizedExperiment(assays = list(counts = counts))  # Convert SummarizedExperiment to matrix for compatibility with BioGA package genomic_data <- assay(se) head(genomic_data) #>       Sample1 Sample2 Sample3 Sample4 Sample5 Sample6 Sample7 Sample8 Sample9 #> Gene1      13      11      15       7       4      10      11       6      12 #> Gene2       6       8      12      16      11      15       6      14      10 #> Gene3       9       9      11       9      11      10      16      11      12 #> Gene4      11      15       9      12       5      10       6       5      13 #> Gene5       8      12      13       7      13      12       9       9      10 #> Gene6      13      13       7      10      10       5       7       9      13 #>       Sample10 #> Gene1       12 #> Gene2        6 #> Gene3       13 #> Gene4       15 #> Gene5        5 #> Gene6       11"},{"path":"https://danymukesha.github.io/BioGA/articles/Introduction.html","id":"initialization","dir":"Articles","previous_headings":"Getting Started","what":"Initialization","title":"Introduction","text":"population represents set candidate combinations genes predictive trait. individual population represented binary vector indicating presence absence gene. example, individual population might represented [1, 0, 1], indicating presence Gene1 Gene3 absence Gene2. population undergoes genetic algorithm operations selection, crossover, mutation, replacement evolve towards individuals higher predictive power trait.","code":"# Initialize population population <- BioGA::initialize_population_cpp(genomic_data,     population_size = 5 )"},{"path":"https://danymukesha.github.io/BioGA/articles/Introduction.html","id":"genetic-algorithm-optimization","dir":"Articles","previous_headings":"Getting Started","what":"Genetic Algorithm Optimization","title":"Introduction","text":"","code":"# Initialize fitness history fitness_history <- list()  # Initialize time progress start_time <- Sys.time()  # Run genetic algorithm optimization generation <- 0 while (TRUE) {     generation <- generation + 1      # Evaluate fitness     fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population)     fitness_history[[generation]] <- fitness      # Check termination condition     if (generation == generations) { # defined number of generations         break     }      # Selection     selected_parents <- BioGA::selection_cpp(population,         fitness,         num_parents = 2     )      # Crossover and Mutation     offspring <- BioGA::crossover_cpp(selected_parents, offspring_size = 2)     # (no mutation in this example)     mutated_offspring <- BioGA::mutation_cpp(offspring, mutation_rate = 0)      # Replacement     population <- BioGA::replacement_cpp(population, mutated_offspring,         num_to_replace = 1     )      # Calculate time progress     elapsed_time <- difftime(Sys.time(), start_time, units = \"secs\")      # Print time progress     cat(         \"\\rGeneration:\", generation, \"- Elapsed Time:\",         format(elapsed_time, units = \"secs\"), \"     \"     ) } #> Generation: 1 - Elapsed Time: 0.01215267 secs      Generation: 2 - Elapsed Time: 0.01467943 secs      Generation: 3 - Elapsed Time: 0.01496625 secs      Generation: 4 - Elapsed Time: 0.01523948 secs      Generation: 5 - Elapsed Time: 0.0155015 secs      Generation: 6 - Elapsed Time: 0.01576972 secs      Generation: 7 - Elapsed Time: 0.0160253 secs      Generation: 8 - Elapsed Time: 0.01628876 secs      Generation: 9 - Elapsed Time: 0.01654768 secs      Generation: 10 - Elapsed Time: 0.0168128 secs      Generation: 11 - Elapsed Time: 0.01707244 secs      Generation: 12 - Elapsed Time: 0.01733303 secs      Generation: 13 - Elapsed Time: 0.01759243 secs      Generation: 14 - Elapsed Time: 0.01785707 secs      Generation: 15 - Elapsed Time: 0.01814389 secs      Generation: 16 - Elapsed Time: 0.01841235 secs      Generation: 17 - Elapsed Time: 0.01867652 secs      Generation: 18 - Elapsed Time: 0.01894212 secs      Generation: 19 - Elapsed Time: 0.01920414 secs"},{"path":"https://danymukesha.github.io/BioGA/articles/Introduction.html","id":"fitness-calculation","dir":"Articles","previous_headings":"Getting Started","what":"Fitness Calculation","title":"Introduction","text":"fitness calculation described provided code calculates measure dissimilarity gene expression profiles individuals population genomic data. measure dissimilarity, “fitness”, quantifies well gene expression profile individual matches genomic data. Mathematically, fitness calculation can represented follows: Let: \\(g_{ijk}\\) gene expression level gene \\(j\\) individual \\(\\) sample \\(k\\) genomic data. \\(p_{ij}\\) gene expression level gene \\(j\\) individual \\(\\) population. \\(N\\) number individuals population. \\(G\\) number genes. \\(S\\) number samples. , fitness \\(F_i\\) individual \\(\\) population can calculated sum squared differences gene expression levels individual \\(\\) corresponding gene expression levels genomic data, across genes samples: \\[ F_i = \\sum_{j=1}^{G} \\sum_{k=1}^{S} (g_{ijk} - p_{ij})^2 \\] fitness calculation aims minimize overall dissimilarity gene expression profiles individuals population genomic data. Individuals lower fitness scores considered gene expression profiles similar genomic data therefore likely selected optimization genetic algorithm.  vignette demonstrates genetic algorithm optimization can applied select best combination genes predicting certain trait using BioGA package. showcases integration genetic algorithms genomic data analysis highlights potential genetic algorithms feature selection genomics.","code":"# Plot fitness change over generations BioGA::plot_fitness_history(fitness_history) sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.3 (2024-02-29) #>  os       Ubuntu 22.04.4 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2024-03-22 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package              * version     date (UTC) lib source #>  abind                  1.4-5       2016-07-21 [1] RSPM #>  animation              2.7         2021-10-07 [1] RSPM #>  Biobase              * 2.62.0      2023-10-24 [1] Bioconductor #>  BiocGenerics         * 0.48.1      2023-11-01 [1] Bioconductor #>  BiocManager            1.30.22     2023-08-08 [1] RSPM #>  biocViews              1.70.0      2023-10-24 [1] Bioconductor #>  BioGA                * 0.99.0      2024-03-22 [1] local #>  bitops                 1.0-7       2021-04-24 [1] RSPM #>  bslib                  0.6.1       2023-11-28 [1] RSPM #>  cachem                 1.0.8       2023-05-01 [1] RSPM #>  cli                    3.6.2       2023-12-11 [1] RSPM #>  colorspace             2.1-0       2023-01-23 [1] RSPM #>  crayon                 1.5.2       2022-09-29 [1] RSPM #>  DelayedArray           0.28.0      2023-10-24 [1] Bioconductor #>  desc                   1.4.3       2023-12-10 [1] RSPM #>  digest                 0.6.35      2024-03-11 [1] RSPM #>  evaluate               0.23        2023-11-01 [1] RSPM #>  fansi                  1.0.6       2023-12-08 [1] RSPM #>  farver                 2.1.1       2022-07-06 [1] RSPM #>  fastmap                1.1.1       2023-02-24 [1] RSPM #>  fs                     1.6.3       2023-07-20 [1] RSPM #>  GenomeInfoDb         * 1.38.8      2024-03-15 [1] Bioconduc~ #>  GenomeInfoDbData       1.2.11      2024-03-22 [1] Bioconductor #>  GenomicRanges        * 1.54.1      2023-10-29 [1] Bioconductor #>  ggplot2                3.5.0       2024-02-23 [1] RSPM #>  glue                   1.7.0       2024-01-09 [1] RSPM #>  graph                  1.80.0      2023-10-24 [1] Bioconductor #>  gtable                 0.3.4       2023-08-21 [1] RSPM #>  highr                  0.10        2022-12-22 [1] RSPM #>  htmltools              0.5.7       2023-11-03 [1] RSPM #>  IRanges              * 2.36.0      2023-10-24 [1] Bioconductor #>  jquerylib              0.1.4       2021-04-26 [1] RSPM #>  jsonlite               1.8.8       2023-12-04 [1] RSPM #>  knitr                  1.45        2023-10-30 [1] RSPM #>  labeling               0.4.3       2023-08-29 [1] RSPM #>  lattice                0.22-5      2023-10-24 [3] CRAN (R 4.3.3) #>  lifecycle              1.0.4       2023-11-07 [1] RSPM #>  magrittr               2.0.3       2022-03-30 [1] RSPM #>  Matrix                 1.6-5       2024-01-11 [3] CRAN (R 4.3.3) #>  MatrixGenerics       * 1.14.0      2023-10-24 [1] Bioconductor #>  matrixStats          * 1.2.0       2023-12-11 [1] RSPM #>  memoise                2.0.1       2021-11-26 [1] RSPM #>  munsell                0.5.0       2018-06-12 [1] RSPM #>  pillar                 1.9.0       2023-03-22 [1] RSPM #>  pkgconfig              2.0.3       2019-09-22 [1] RSPM #>  pkgdown                2.0.7       2022-12-14 [1] any (@2.0.7) #>  purrr                  1.0.2       2023-08-10 [1] RSPM #>  R6                     2.5.1       2021-08-19 [1] RSPM #>  ragg                   1.3.0       2024-03-13 [1] RSPM #>  RBGL                   1.78.0      2023-10-24 [1] Bioconductor #>  Rcpp                   1.0.12      2024-01-09 [1] RSPM #>  RCurl                  1.98-1.14   2024-01-09 [1] RSPM #>  rlang                  1.1.3       2024-01-10 [1] RSPM #>  rmarkdown              2.26        2024-03-05 [1] RSPM #>  RUnit                  0.4.33      2024-02-22 [1] RSPM #>  S4Arrays               1.2.1       2024-03-04 [1] Bioconduc~ #>  S4Vectors            * 0.40.2      2023-11-23 [1] Bioconduc~ #>  sass                   0.4.9       2024-03-15 [1] RSPM #>  scales                 1.3.0       2023-11-28 [1] RSPM #>  sessioninfo            1.2.2       2021-12-06 [1] RSPM #>  SparseArray            1.2.4       2024-02-11 [1] Bioconduc~ #>  SummarizedExperiment * 1.32.0      2023-10-24 [1] Bioconductor #>  systemfonts            1.0.6       2024-03-07 [1] RSPM #>  textshaping            0.3.7       2023-10-09 [1] RSPM #>  tibble                 3.2.1       2023-03-20 [1] RSPM #>  utf8                   1.2.4       2023-10-22 [1] RSPM #>  vctrs                  0.6.5       2023-12-01 [1] RSPM #>  withr                  3.0.0       2024-01-16 [1] RSPM #>  xfun                   0.42        2024-02-08 [1] RSPM #>  XML                    3.99-0.16.1 2024-01-22 [1] RSPM #>  XVector                0.42.0      2023-10-24 [1] Bioconductor #>  yaml                   2.3.8       2023-12-11 [1] RSPM #>  zlibbioc               1.48.2      2024-03-13 [1] Bioconduc~ #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.3.3/lib/R/site-library #>  [3] /opt/R/4.3.3/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://danymukesha.github.io/BioGA/articles/Usage.html","id":"genetic-algorithm-optimization-vignette","dir":"Articles","previous_headings":"","what":"Genetic Algorithm Optimization Vignette","title":"Usage","text":"vignette provides step--step explanation genetic algorithm optimization process using BioGA package.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/Usage.html","id":"chapter-1-initialization","dir":"Articles","previous_headings":"Genetic Algorithm Optimization Vignette","what":"Chapter 1: Initialization","title":"Usage","text":"","code":"# Load the BioGA package library(BioGA)  # Example genomic data genomic_data <- matrix(rnorm(50), nrow = 10, ncol = 10)  # Initialize population population <- initialize_population_cpp(genomic_data, population_size = 5)  # Initialize fitness history fitness_history <- list()  # Initialize time progress start_time <- Sys.time()"},{"path":"https://danymukesha.github.io/BioGA/articles/Usage.html","id":"chapter-2-genetic-algorithm-optimization","dir":"Articles","previous_headings":"Genetic Algorithm Optimization Vignette","what":"Chapter 2: Genetic Algorithm Optimization","title":"Usage","text":"","code":"# Run genetic algorithm optimization generation <- 0 while (TRUE) {     generation <- generation + 1      # Evaluate fitness     fitness <- evaluate_fitness_cpp(genomic_data, population)     fitness_history[[generation]] <- fitness      # Check termination condition     if (generation == 6) {         break     }      # Selection     selected_parents <- selection_cpp(population, fitness,         num_parents = 2     )      # Crossover and Mutation     offspring <- crossover_cpp(selected_parents, offspring_size = 2)     # (no mutation in this example)     mutated_offspring <- mutation_cpp(offspring, mutation_rate = 0)      # Replacement     population <- replacement_cpp(population, mutated_offspring,         num_to_replace = 1     )      # Calculate time progress     elapsed_time <- difftime(Sys.time(), start_time, units = \"secs\")      # Print time progress     cat(         \"\\rGeneration:\", generation, \"- Elapsed Time:\",         format(elapsed_time, units = \"secs\"), \"     \"     ) } #> Generation: 1 - Elapsed Time: 0.07291508 secs      Generation: 2 - Elapsed Time: 0.07389545 secs      Generation: 3 - Elapsed Time: 0.0740211 secs      Generation: 4 - Elapsed Time: 0.07413578 secs      Generation: 5 - Elapsed Time: 0.07424092 secs"},{"path":"https://danymukesha.github.io/BioGA/articles/Usage.html","id":"chapter-3-results-visualization","dir":"Articles","previous_headings":"Genetic Algorithm Optimization Vignette","what":"Chapter 3: Results Visualization","title":"Usage","text":"vignette demonstrates implement genetic algorithm optimization process using BioGA package, initialization results visualization.","code":"# Plot fitness change over generations plot_fitness_history(fitness_history) sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.3 (2024-02-29) #>  os       Ubuntu 22.04.4 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2024-03-22 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package              * version     date (UTC) lib source #>  abind                  1.4-5       2016-07-21 [1] RSPM #>  animation              2.7         2021-10-07 [1] RSPM #>  Biobase                2.62.0      2023-10-24 [1] Bioconductor #>  BiocGenerics           0.48.1      2023-11-01 [1] Bioconductor #>  BiocManager            1.30.22     2023-08-08 [1] RSPM #>  biocViews              1.70.0      2023-10-24 [1] Bioconductor #>  BioGA                * 0.99.0      2024-03-22 [1] local #>  bitops                 1.0-7       2021-04-24 [1] RSPM #>  bslib                  0.6.1       2023-11-28 [1] RSPM #>  cachem                 1.0.8       2023-05-01 [1] RSPM #>  cli                    3.6.2       2023-12-11 [1] RSPM #>  colorspace             2.1-0       2023-01-23 [1] RSPM #>  crayon                 1.5.2       2022-09-29 [1] RSPM #>  DelayedArray           0.28.0      2023-10-24 [1] Bioconductor #>  desc                   1.4.3       2023-12-10 [1] RSPM #>  digest                 0.6.35      2024-03-11 [1] RSPM #>  evaluate               0.23        2023-11-01 [1] RSPM #>  fansi                  1.0.6       2023-12-08 [1] RSPM #>  farver                 2.1.1       2022-07-06 [1] RSPM #>  fastmap                1.1.1       2023-02-24 [1] RSPM #>  fs                     1.6.3       2023-07-20 [1] RSPM #>  GenomeInfoDb           1.38.8      2024-03-15 [1] Bioconduc~ #>  GenomeInfoDbData       1.2.11      2024-03-22 [1] Bioconductor #>  GenomicRanges          1.54.1      2023-10-29 [1] Bioconductor #>  ggplot2                3.5.0       2024-02-23 [1] RSPM #>  glue                   1.7.0       2024-01-09 [1] RSPM #>  graph                  1.80.0      2023-10-24 [1] Bioconductor #>  gtable                 0.3.4       2023-08-21 [1] RSPM #>  highr                  0.10        2022-12-22 [1] RSPM #>  htmltools              0.5.7       2023-11-03 [1] RSPM #>  IRanges                2.36.0      2023-10-24 [1] Bioconductor #>  jquerylib              0.1.4       2021-04-26 [1] RSPM #>  jsonlite               1.8.8       2023-12-04 [1] RSPM #>  knitr                  1.45        2023-10-30 [1] RSPM #>  labeling               0.4.3       2023-08-29 [1] RSPM #>  lattice                0.22-5      2023-10-24 [3] CRAN (R 4.3.3) #>  lifecycle              1.0.4       2023-11-07 [1] RSPM #>  magrittr               2.0.3       2022-03-30 [1] RSPM #>  Matrix                 1.6-5       2024-01-11 [3] CRAN (R 4.3.3) #>  MatrixGenerics         1.14.0      2023-10-24 [1] Bioconductor #>  matrixStats            1.2.0       2023-12-11 [1] RSPM #>  memoise                2.0.1       2021-11-26 [1] RSPM #>  munsell                0.5.0       2018-06-12 [1] RSPM #>  pillar                 1.9.0       2023-03-22 [1] RSPM #>  pkgconfig              2.0.3       2019-09-22 [1] RSPM #>  pkgdown                2.0.7       2022-12-14 [1] any (@2.0.7) #>  purrr                  1.0.2       2023-08-10 [1] RSPM #>  R6                     2.5.1       2021-08-19 [1] RSPM #>  ragg                   1.3.0       2024-03-13 [1] RSPM #>  RBGL                   1.78.0      2023-10-24 [1] Bioconductor #>  Rcpp                   1.0.12      2024-01-09 [1] RSPM #>  RCurl                  1.98-1.14   2024-01-09 [1] RSPM #>  rlang                  1.1.3       2024-01-10 [1] RSPM #>  rmarkdown              2.26        2024-03-05 [1] RSPM #>  RUnit                  0.4.33      2024-02-22 [1] RSPM #>  S4Arrays               1.2.1       2024-03-04 [1] Bioconduc~ #>  S4Vectors              0.40.2      2023-11-23 [1] Bioconduc~ #>  sass                   0.4.9       2024-03-15 [1] RSPM #>  scales                 1.3.0       2023-11-28 [1] RSPM #>  sessioninfo            1.2.2       2021-12-06 [1] RSPM #>  SparseArray            1.2.4       2024-02-11 [1] Bioconduc~ #>  SummarizedExperiment   1.32.0      2023-10-24 [1] Bioconductor #>  systemfonts            1.0.6       2024-03-07 [1] RSPM #>  textshaping            0.3.7       2023-10-09 [1] RSPM #>  tibble                 3.2.1       2023-03-20 [1] RSPM #>  utf8                   1.2.4       2023-10-22 [1] RSPM #>  vctrs                  0.6.5       2023-12-01 [1] RSPM #>  withr                  3.0.0       2024-01-16 [1] RSPM #>  xfun                   0.42        2024-02-08 [1] RSPM #>  XML                    3.99-0.16.1 2024-01-22 [1] RSPM #>  XVector                0.42.0      2023-10-24 [1] Bioconductor #>  yaml                   2.3.8       2023-12-11 [1] RSPM #>  zlibbioc               1.48.2      2024-03-13 [1] Bioconduc~ #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.3.3/lib/R/site-library #>  [3] /opt/R/4.3.3/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://danymukesha.github.io/BioGA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dany Mukesha. Author, maintainer.","code":""},{"path":"https://danymukesha.github.io/BioGA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mukesha D (2024). BioGA: Bioinformatics Genetic Algorithm (BioGA). R package version 0.99.0, https://danymukesha.github.io/BioGA/.","code":"@Manual{,   title = {BioGA: Bioinformatics Genetic Algorithm (BioGA)},   author = {Dany Mukesha},   year = {2024},   note = {R package version 0.99.0},   url = {https://danymukesha.github.io/BioGA/}, }"},{"path":"https://danymukesha.github.io/BioGA/index.html","id":"bioga-","dir":"","previous_headings":"","what":"Bioinformatics Genetic Algorithm (BioGA)","title":"Bioinformatics Genetic Algorithm (BioGA)","text":"BioGA package provides set functions genetic algorithm optimization tailored analyzing high throughput genomic data. functions implemented C++ improved speed efficiency, easy--use interface use within R.","code":""},{"path":"https://danymukesha.github.io/BioGA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bioinformatics Genetic Algorithm (BioGA)","text":"can install package directly GitHub using devtools package:","code":"devtools::install_github(\"danymukesha/BioGA\") #> Using GitHub PAT from the git credential store. #> Downloading GitHub repo danymukesha/BioGA@HEAD #> Skipping 16 packages ahead of CRAN: BiocGenerics, graph, S4Arrays, IRanges, S4Vectors, MatrixGenerics, GenomeInfoDbData, zlibbioc, XVector, GenomeInfoDb, RBGL, Biobase, DelayedArray, GenomicRanges, biocViews, SummarizedExperiment #> ── R CMD build ───────────────────────────────────────────────────────────────── #>          checking for file 'C:\\Users\\dany.mukesha\\AppData\\Local\\Temp\\RtmpmMdUaw\\remotes565c18d23454\\danymukesha-BioGA-ff25dc5/DESCRIPTION' ...     checking for file 'C:\\Users\\dany.mukesha\\AppData\\Local\\Temp\\RtmpmMdUaw\\remotes565c18d23454\\danymukesha-BioGA-ff25dc5/DESCRIPTION' ...   ✔  checking for file 'C:\\Users\\dany.mukesha\\AppData\\Local\\Temp\\RtmpmMdUaw\\remotes565c18d23454\\danymukesha-BioGA-ff25dc5/DESCRIPTION' (366ms) #>       ─  preparing 'BioGA': #>    checking DESCRIPTION meta-information ...     checking DESCRIPTION meta-information ...   ✔  checking DESCRIPTION meta-information #> ─  cleaning src #>       ─  checking for LF line-endings in source and make files and shell scripts #>       ─  checking for empty or unneeded directories #>      Omitted 'LazyData' from DESCRIPTION #>       ─  building 'BioGA_0.99.0.tar.gz' #>       #>  #> Installing package into 'C:/Users/dany.mukesha/AppData/Local/Temp/RtmpS0ZNjt/temp_libpath58884b2761af' #> (as 'lib' is unspecified)"},{"path":"https://danymukesha.github.io/BioGA/reference/BioGA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BioGA: Bioinformatics Genetic Algorithm (BioGA) — BioGA-package","title":"BioGA: Bioinformatics Genetic Algorithm (BioGA) — BioGA-package","text":"Genetic algorithm class optimization algorithms inspired process natural selection genetics. package allows users analyze optimize high throughput genomic data using genetic algorithms. functions provided implemented C++ improved speed efficiency, easy--use interface use within R.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/reference/BioGA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BioGA: Bioinformatics Genetic Algorithm (BioGA) — BioGA-package","text":"Maintainer: Dany Mukesha danymukesha@gmail.com (ORCID)","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/animate_fitness_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate Fitness Change Over Generations — animate_fitness_history","title":"Animate Fitness Change Over Generations — animate_fitness_history","text":"Animate change fitness values generations.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/animate_fitness_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate Fitness Change Over Generations — animate_fitness_history","text":"","code":"animate_fitness_history(fitness_history)"},{"path":"https://danymukesha.github.io/BioGA/reference/animate_fitness_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate Fitness Change Over Generations — animate_fitness_history","text":"fitness_history list containing fitness values generation.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/animate_fitness_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate Fitness Change Over Generations — animate_fitness_history","text":"Animation fitness history","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/animate_fitness_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate Fitness Change Over Generations — animate_fitness_history","text":"","code":"# example of usage fitness_history <- list(c(10, 8, 6, 4, 2), c(9, 7, 5, 3, 1)) animate_fitness_history(fitness_history) #> Error in if (100%%fps) stop(\"argument 'fps' must be a factor of 100\"): argument is of length zero"},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to perform crossover between selected individuals — crossover_cpp","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"Function perform crossover selected individuals","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"","code":"crossover_cpp(selected_parents, offspring_size)"},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"selected_parents Numeric matrix representing selected individuals. offspring_size Number offspring generate.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"Numeric matrix representing offspring.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,     population_size = 5 ) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population) selected_parents <- BioGA::selection_cpp(population, fitness,     num_parents = 2 ) BioGA::crossover_cpp(selected_parents, offspring_size = 2) #>             [,1]      [,2]     [,3]      [,4]      [,5]      [,6]      [,7] #> [1,] -0.55369938 0.6289820 1.337320 0.5562243 0.4447971 1.1105349 -2.612334 #> [2,] -0.04277248 0.4027353 1.225636 0.2590607 1.1666510 0.4882689 -2.443225 #>             [,8]        [,9]     [,10] #> [1,] -0.15569378  0.17218172 -1.911720 #> [2,] -0.08582204 -0.03600895 -1.805586"},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"Function evaluate fitness using genomic data","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"","code":"evaluate_fitness_cpp(genomic_data, population)"},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"genomic_data Numeric matrix genomic data rows represent genes/features columns represent samples. population Numeric matrix representing population individuals.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"Numeric vector fitness scores individual.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,     population_size = 5 ) BioGA::evaluate_fitness_cpp(genomic_data, population) #> [1] 226.6913 186.1375 174.8477 139.8093 158.8960"},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to initialize the population from genomic data — initialize_population_cpp","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"Function initialize population genomic data","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"","code":"initialize_population_cpp(genomic_data, population_size)"},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"genomic_data Numeric matrix genomic data rows represent genes/features columns represent samples. population_size Number individuals population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"Numeric matrix representing initialized population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) BioGA::initialize_population_cpp(genomic_data, population_size = 5) #>            [,1]       [,2]       [,3]       [,4]        [,5]       [,6] #> [1,] -1.1533984 -0.2217445 -1.0095287  0.1243011 -0.90634018 -1.5150245 #> [2,] -0.9028149 -0.2217445  0.7470286 -0.2721537  0.54214155  1.2333901 #> [3,] -1.1533984 -0.3406379 -1.1936412 -0.2721537 -1.43127078  1.1298352 #> [4,] -0.4293801 -1.3128142 -0.1178601 -1.2705131  1.45584140 -0.6395348 #> [5,]  1.0120018 -0.3406379 -0.1178601  0.1243011  0.07105336  0.0751059 #>            [,7]       [,8]       [,9]      [,10] #> [1,]  1.8933605  0.4154064 -0.6048294  1.4601102 #> [2,]  0.3404245 -0.6331782  1.1533758 -1.6865047 #> [3,]  0.3404245 -0.4800535 -2.0636545  0.2399596 #> [4,] -1.0985089  0.4154064 -0.1026030  0.2399596 #> [5,]  1.8933605 -0.4800535 -1.4522998  0.9412061"},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to mutate the offspring — mutation_cpp","title":"Function to mutate the offspring — mutation_cpp","text":"Function mutate offspring","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to mutate the offspring — mutation_cpp","text":"","code":"mutation_cpp(offspring, mutation_rate)"},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to mutate the offspring — mutation_cpp","text":"offspring Numeric matrix representing offspring. mutation_rate Probability mutation individual.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to mutate the offspring — mutation_cpp","text":"Numeric matrix representing mutated offspring.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to mutate the offspring — mutation_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,     population_size = 5 ) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population) selected_parents <- BioGA::selection_cpp(population,     fitness,     num_parents = 2 ) offspring <- BioGA::crossover_cpp(selected_parents, offspring_size = 2) BioGA::mutation_cpp(offspring, mutation_rate = 0) #>          [,1]      [,2]      [,3]         [,4]       [,5]       [,6]       [,7] #> [1,] 0.332944 0.9342611 0.8130582  1.803483361 -0.3385765 -0.4004052 -0.3840073 #> [2,] 0.332944 0.9985688 0.3572538 -0.007931943 -0.3385765  0.2910241 -0.8628467 #>          [,8]      [,9]      [,10] #> [1,] 1.393978 -0.203209 -0.1738201 #> [2,] 1.162411 -0.203209 -0.1738201"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Fitness Values — plot_fitness","title":"Plot Fitness Values — plot_fitness","text":"Plot fitness values population generations.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Fitness Values — plot_fitness","text":"","code":"plot_fitness(fitness_values)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Fitness Values — plot_fitness","text":"fitness_values numeric vector containing fitness values.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Fitness Values — plot_fitness","text":"Plot fitness","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Fitness Values — plot_fitness","text":"","code":"# example of usage fitness_values <- c(10, 8, 6, 4, 2) plot_fitness(fitness_values)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Fitness Change Over Generations — plot_fitness_history","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"Plot change fitness values generations.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"","code":"plot_fitness_history(fitness_history)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"fitness_history list containing fitness values generation.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"Plot fitness history","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"","code":"# example of usage fitness_history <- list(c(10, 8, 6, 4, 2), c(9, 7, 5, 3, 1)) plot_fitness_history(fitness_history)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Population Distribution — plot_population","title":"Plot Population Distribution — plot_population","text":"Plot distribution individuals population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Population Distribution — plot_population","text":"","code":"plot_population(population)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Population Distribution — plot_population","text":"population numeric matrix containing population data.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Population Distribution — plot_population","text":"Plot population","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Population Distribution — plot_population","text":"","code":"# example of usage population <- matrix(runif(100), nrow = 10, ncol = 10) plot_population(population)"},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to replace non-selected individuals in the population — replacement_cpp","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"Replace non-selected individuals population","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"","code":"replacement_cpp(population, offspring, num_to_replace)"},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"population Numeric matrix representing population individuals. offspring Numeric matrix representing offspring. num_to_replace Number individuals replace.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"Numeric matrix representing updated population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,     population_size = 5 ) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population) selected_parents <- BioGA::selection_cpp(population, fitness,     num_parents = 2 ) offspring <- BioGA::crossover_cpp(selected_parents, offspring_size = 2) mutated_offspring <- BioGA::mutation_cpp(offspring, mutation_rate = 0) BioGA::replacement_cpp(population, mutated_offspring, num_to_replace = 1) #>             [,1]        [,2]       [,3]       [,4]       [,5]        [,6] #> [1,] -1.23891024 -0.80773497  1.3677067 -0.6274346  0.5496843 -0.80595190 #> [2,] -0.75043793  0.28428031  0.9748363 -0.9170955 -0.7100976 -0.68371382 #> [3,]  0.06454387  0.65238630 -0.8604899 -0.4234901 -1.3758365 -0.03981704 #> [4,] -0.26196562 -0.08382568  1.6585423 -1.4107009 -0.2166291 -0.68371382 #> [5,] -1.23891024  0.65238630  0.2911302 -0.4234901 -1.2035661 -0.68371382 #>           [,7]       [,8]       [,9]      [,10] #> [1,] 0.5372832 -0.3335997  1.6418480  1.3638045 #> [2,] 0.3963236 -0.1447576  1.4108161 -1.0578875 #> [3,] 0.6138369  0.7468031 -0.3356721 -0.6439059 #> [4,] 0.6869825 -0.1222859  1.6418480 -0.7823792 #> [5,] 0.1056647 -0.1672293  1.1797842 -1.3333958"},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to select individuals based on fitness scores — selection_cpp","title":"Function to select individuals based on fitness scores — selection_cpp","text":"Function select individuals based fitness scores","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to select individuals based on fitness scores — selection_cpp","text":"","code":"selection_cpp(population, fitness, num_parents)"},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to select individuals based on fitness scores — selection_cpp","text":"population Numeric matrix representing population individuals. fitness Numeric vector fitness scores individual. num_parents Number individuals select.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to select individuals based on fitness scores — selection_cpp","text":"Numeric matrix representing selected individuals.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to select individuals based on fitness scores — selection_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,     population_size = 5 ) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population) BioGA::selection_cpp(population, fitness, num_parents = 2) #>            [,1]       [,2]      [,3]      [,4]       [,5]       [,6]       [,7] #> [1,] -0.5266926 -0.3284917 0.4651652 0.6979863  0.8769131 -1.1489039 -0.3648510 #> [2,] -0.8396228 -1.3549281 0.4179257 0.1668892 -0.8643498 -0.9302853 -0.6110461 #>            [,8]       [,9]      [,10] #> [1,] -0.8603562 -1.2224871 -0.4711791 #> [2,] -1.4372467 -0.4941435  0.4068052"},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-0990","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.0","title":"BioGA 0.99.0","text":"Added NEWS.md file track changes package.","code":""}]
