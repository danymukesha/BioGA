[{"path":"https://danymukesha.github.io/BioGA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Dany Mukesha Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"installation","dir":"Articles","previous_headings":"Getting Started","what":"Installation","title":"Introduction to BioGA","text":"install package, start R (version “4.4”) enter: can also install package directly GitHub using devtools package: simplified example, illustrated usage BioGA genetic algorithm optimization context high throughput genomic data analysis. showcased interoperability Bioconductor classes, demonstrating genetic algorithm optimization can integrated existing genomics pipelines improve analysis interpretation. demonstrated usage BioGA context selecting best combination genes predicting certain trait, disease susceptibility.","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # The following initializes usage of Bioc devel BiocManager::install(version='devel')  BiocManager::install(pkgs = \"BioGA\", version = \"devel\", force = TRUE) devtools::install_github(\"danymukesha/BioGA\")"},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"algorithmic-framework","dir":"Articles","previous_headings":"Getting Started > Implementation","what":"Algorithmic Framework","title":"Introduction to BioGA","text":"core BioGA lies modified version NSGA-II algorithm, tailored specifically demands high-throughput genomic data. Traditional implementations NSGA-II operate generic problem domains, BioGA introduces biologically informed heuristics multiple stages evolutionary cycle better capture structure genomic data. initialization mutation, step algorithm leverages gene-level relationships maintain biological plausibility. notable innovation multi-objective fitness function, combines classification accuracy gene set sparsity. adjusting tunable parameter α, users can customize trade-depending whether interpretability (fewer genes) predictive power important application. fitness evaluation parallelized using OpenMP, allowing fast computation even large populations datasets. C++ snippet included demonstrates fitness evaluation computes three key metrics; accuracy, sparsity, weighted combination guide evolutionary selection. Importantly, performance-critical computation written native C++ Rcpp, yielding speed memory efficiency.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"software-architecture","dir":"Articles","previous_headings":"Getting Started > Implementation","what":"Software Architecture","title":"Introduction to BioGA","text":"BioGA’s layered architecture designed modularity, scalability, user accessibility. top layer, clean R/Bioconductor interface makes tool accessible bioinformatics community, providing standard S4 object support integration SummarizedExperiment ExpressionSet classes. enables seamless incorporation existing genomic analysis pipelines. middle layer, written C++ using RcppArmadillo, provides computational engine. layer fully parallelized using RcppParallel OpenMP, enabling users exploit multi-core architectures. Even commodity hardware, BioGA can outperform many existing tools due efficient backend. Finally, architecture connects biological databases annotation frameworks, including STRINGdb, WGCNA, KEGG pathways. integration ensures evolutionary operators mutation selection biologically informed rather purely random, critical advancement traditional GA models ignore gene-gene relationships.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"biologically-informed-operators","dir":"Articles","previous_headings":"Getting Started > Implementation","what":"Biologically Informed Operators","title":"Introduction to BioGA","text":"standout feature BioGA ability incorporate biological knowledge directly evolutionary process. Instead relying purely stochastic operations, BioGA uses known gene interaction networks guide mutations initialize populations. example, genes selected mutation can constrained lie within co-expression neighborhoods, reducing likelihood generating biologically implausible candidates. Similarly, cluster-based initialization based WGCNA modules ensures starting populations contain co-regulated gene sets. dramatically improves convergence speed algorithm increases biological interpretability final solution. selection, pathway-aware heuristics prioritize gene sets enriched relevant signaling pathways, promoting results accurate biologically meaningful. biologically inspired innovations make BioGA particularly suited applications precision medicine, model interpretability biological validity just important statistical performance. Figure 1: Workflow BioGA algorithm. Gene expression data, supported gene networks pathways (e.g., STRINGdb, WGCNA), initiates biologically informed population initialization. feeds modified NSGA-II evolutionary algorithm featuring multi-objective fitness function (balancing classification accuracy gene set sparsity) parallelized C++ backend (Rcpp, OpenMP) efficiency. result optimized gene signatures clustering models preserve biological plausibility interpretability. See Section Implementation details.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"advantages-over-existing-approaches","dir":"Articles","previous_headings":"Getting Started > Implementation","what":"Advantages Over Existing Approaches","title":"Introduction to BioGA","text":"BioGA represents significant leap forward applying genetic algorithms genomic data analysis. multi-objective optimization capability allows researchers visualize full spectrum solutions; ranging sparse, interpretable models dense, highly predictive ones. crucial contexts like biomarker discovery feature selection, trade-offs simplicity accuracy must carefully balanced. Additionally, BioGA’s C++ backend parallel processing support dramatically outperform R-based tools like GA, genalg, rgenoud. leveraging OpenMP memory-efficient data structures, processes genome-wide datasets minutes rather hours. efficiency unlocks new use cases iterative tuning, real-time interactive analysis, single-cell datasets hundreds thousands cells. Equally important BioGA’s biological relevance. embedding knowledge gene networks pathways optimization process, ensures discovered features predictive also interpretable within biological context. particularly valuable downstream tasks like experimental validation, clinical translation, pathway enrichment analysis.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"comparison-with-related-tools","dir":"Articles","previous_headings":"Getting Started > Implementation","what":"Comparison with Related Tools","title":"Introduction to BioGA","text":"put BioGA’s capabilities perspective, Table 2 compares features common GA packages. Notably, BioGA package supports four critical features: multi-objective optimization, biological constraints, parallel computing, Bioconductor integration. tools offer parallelism flexible fitness functions, none combine domain-specific biological awareness necessary modern genomics. unique positioning makes BioGA especially well-suited bioinformatics labs seeking robust, scalable, biologically informed optimization frameworks.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"limitations-and-future-directions","dir":"Articles","previous_headings":"Getting Started > Implementation","what":"Limitations and Future Directions","title":"Introduction to BioGA","text":"Despite strengths, BioGA several current limitations present opportunities future work. One area GPU acceleration. Preliminary CUDA support shows promising speedups fitness evaluation function, development enable real-time genomic optimization large-scale datasets clinical settings. Another direction multi-omics integration. BioGA currently supports gene expression data, future versions allow users integrate methylation, copy number variation, proteomics data additional constraints objectives. enable comprehensive molecular profiling holistic biomarker discovery. Lastly, cloud-native deployment via containerized workflows (Docker, Singularity) development, along prebuilt pipelines AWS Batch Google Cloud Life Sciences. allow BioGA scale efficiently across cloud computing resources larger collaborative projects high-throughput pipelines. BioGA addresses pressing need modern genomics: ability perform efficient, biologically relevant optimization high-dimensional data. combining high-performance C++ core, multi-objective optimization via NSGA-II, integration biological knowledge bases, BioGA empowers researchers identify meaningful, interpretable solutions complex problems like biomarker discovery, feature selection, single-cell clustering. Unlike traditional GAs, BioGA black-box optimizer; deeply embedded biological reasoning. design philosophy ensures solutions computationally optimal also scientifically actionable. Whether used academic research, translational bioinformatics, personalized medicine, BioGA offers powerful framework tailored demands modern genomic data.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"overview","dir":"Articles","previous_headings":"Getting Started","what":"Overview","title":"Introduction to BioGA","text":"Genomic data generally refers genetic information stored DNA organism. DNA molecules basically mmade sequence nucleotides (adenine, thymine, cytosine, guanine). genetic information likely provides clear understanding various biological processes, gene expression, genetic variation, evolutionary relationships. context, genomic data consist gene expression profiles measured across different individuals (e.g., patients). : row genomic_data matrix represents gene, column represents patient sample. Values matrix represent expression levels gene patient sample. example genomic data, let’s consider table similar following: table , row represents gene (genomic feature), column represents sample. values matrix represent measurement gene expression, mRNA levels protein abundance, sample. instance, value 0.1 “Sample 1” Gene1 indicates expression level Gene1 “Sample 1”. Similarly, value 2.2 “Sample 2” Gene3 indicates expression level Gene3 “Sample 2”. Genomic data can used various analyses, including genetic association studies, gene expression analysis, comparative genomics. context evaluate_fitness_cpp function, genomic data used calculate fitness scores individuals population. Just clarify, individual “feature” typically context genetic algorithm optimization. population represents set candidate combinations genes predictive trait (specific characteristic individual, determined genes). important information need know gene part set . , individual population represented binary vector indicating presence absence gene. example, set candidate genes (population) might represented [1, 0, 1], indicating presence Gene1 Gene3 absence Gene2. population undergoes genetic algorithm operations selection, crossover, mutation, replacement evolve towards individuals higher predictive power trait.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"bioga-genomic-analysis-with-geo-dataset","dir":"Articles","previous_headings":"","what":"BioGA Genomic Analysis with GEO Dataset","title":"Introduction to BioGA","text":"case-study, demonstrated full GA workflow using GEO dataset (GSE10072, lung cancer gene expression) stored SummarizedExperiment object. includes data preprocessing, BioGA execution, visualization results, ensuring reproducibility.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to BioGA","text":"already described , BioGA R package genetic algorithm (GA) optimization high-throughput genomic data. , demonstrate full GA workflow using lung cancer gene expression dataset (GEO GSE10072) stored SummarizedExperiment object. aim identify sparse gene set minimizes expression differences samples. Load required packages:","code":"library(BioGA) library(SummarizedExperiment) library(GEOquery) library(BiocParallel) library(ggplot2) library(pheatmap) library(dplyr)  library(caret) library(xgboost) library(randomForest) library(pROC) library(parallel) library(doParallel) library(iml) library(lime) library(caretEnsemble)  library(survminer) library(survival) library(timeROC)"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Introduction to BioGA","text":"use GEO GSE10072, lung cancer dataset gene expression profiles. Download preprocess data: Phenotype data:","code":"geo_data <- GEOquery::getGEO(\"GSE10072\", GSEMatrix = TRUE)[[1]] #> Found 1 file(s) #> GSE10072_series_matrix.txt.gz se <- as(geo_data, \"SummarizedExperiment\") genomic_data <- assay(se) # expression matrix (genes x samples) genomic_data <- genomic_data[1:1000, ] dim(genomic_data) #> [1] 1000  107 pheno <- pData(geo_data)  pheno$Age <- as.numeric(as.character(pheno$`Age at Diagnosis:ch1`)) pheno$Gender <- factor(pheno$`Gender:ch1`) pheno$Stage <- factor(pheno$`Stage:ch1`)  set.seed(42) pheno$time <- sample(200:2000, nrow(pheno), replace = TRUE) pheno$status <- sample(c(0, 1), nrow(pheno), replace = TRUE)"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"gene-clustering-optional","dir":"Articles","previous_headings":"","what":"Gene Clustering (Optional)","title":"Introduction to BioGA","text":"can cluster genes exploit co-expression structure: Plot dendrogram genes:","code":"cor_matrix <- cor(t(genomic_data)) hc <- hclust(as.dist(1 - cor_matrix), method = \"average\") clusters <- cutree(hc, k = 20)  table(clusters) #> clusters #>   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  #> 444   7  30   2 141  81 177  19   3  26   2  19   2   5  13  10   2   7   4   6 plot(hc, labels = FALSE, main = \"Hierarchical Gene Clustering Dendrogram\")"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"running-bioga","dir":"Articles","previous_headings":"","what":"Running BioGA","title":"Introduction to BioGA","text":"Let’s set GA parameters: run GA: Pareto Visualization","code":"population_size <- 30 num_generations <- 25 crossover_rate <- 0.9 eta_c <- 20 mutation_rate <- 0.05 num_parents <- 20 num_offspring <- 20 num_to_replace <- 10 weights <- c(1.0, 0.3) # expression difference and sparsity weight result <- bioga_main_cpp(     genomic_data = genomic_data,     population_size = population_size,     num_generations = num_generations,     crossover_rate = crossover_rate,     eta_c = eta_c,     mutation_rate = mutation_rate,     num_parents = num_parents,     num_offspring = num_offspring,     num_to_replace = num_to_replace,     weights = weights,     seed = 2025,     clusters = clusters) #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. fitness <- result$fitness df <- data.frame(     Expression_Diff = fitness[, 1],     Sparsity = fitness[, 2]) ggplot(df, aes(x = Expression_Diff, y = Sparsity)) +     geom_point(color = \"steelblue\") +     labs(title = \"BioGA Pareto Front\", x = \"Expression Difference\", y = \"Sparsity\") +     theme_classic()"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"convergence-analysis","dir":"Articles","previous_headings":"","what":"Convergence Analysis","title":"Introduction to BioGA","text":"Currently, bioga_main_cpp track fitness history directly, let’s re-run capture best fitness per generation:","code":"track_fitness <- function(genomic_data, population_size, seed) {     pop <- initialize_population_cpp(genomic_data, population_size, seed)     best_fit <- c()     for (g in seq_len(num_generations)) {         fit <- evaluate_fitness_cpp(genomic_data, pop, weights)         best_fit <- c(best_fit, min(fit[, 1]))         parents <- selection_cpp(pop, fit, num_parents)         offspring <- crossover_cpp(parents, num_offspring)         mutated <- mutation_cpp(offspring, mutation_rate, g, num_generations)         fit_off <- evaluate_fitness_cpp(genomic_data, mutated, weights)         pop <- replacement_cpp(pop, mutated, fit, fit_off, num_to_replace)     }      best_fit  }  fitness_trace <- track_fitness(genomic_data, population_size, 2025) #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 1  ggplot(data.frame(Generation = 1:num_generations, Fitness = fitness_trace),     aes(x = Generation, y = Fitness)) +     geom_line(color = \"steelblue\", linewidth = 1) +     labs(title = \"Best Fitness Convergence Across Generations\",         y = \"Best Fitness (Expression Difference)\",         x = \"Generation\") +     theme_classic()"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"visualize-final-population","dir":"Articles","previous_headings":"","what":"Visualize Final Population","title":"Introduction to BioGA","text":"Let’s see last generation’s population diversity:","code":"pheatmap(result$population,cluster_rows = TRUE,cluster_cols = TRUE,     main = \"Final Population of Individuals\")"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"gene-selection-frequency","dir":"Articles","previous_headings":"","what":"Gene Selection Frequency","title":"Introduction to BioGA","text":"See genes frequently included across individuals:","code":"gene_freq <- colMeans(result$population != 0)  barplot(gene_freq, las = 2,          main = \"Frequency of Gene Selection in Final Population\",         ylab = \"Selection Frequency\",col = \"darkgreen\")"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"network-constraints-example","dir":"Articles","previous_headings":"","what":"Network Constraints Example","title":"Introduction to BioGA","text":"incorporate network available. demonstration, build random network: Apply mutation network constraint:","code":"network <- matrix(runif(1000^2, 0, 1), nrow=1000) diag(network) <- 0 mutated_with_net <- mutation_cpp(     result$population, mutation_rate, iteration = 20,     max_iterations = num_generations, network = network)  pheatmap(mutated_with_net,     main = \"Population After Network-Constrained Mutation\")"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"feature-selection","dir":"Articles","previous_headings":"","what":"Feature Selection","title":"Introduction to BioGA","text":"Select best individual extract features","code":"best_idx <- which.min(fitness[,1]) best_individual <- result$population[best_idx, ] selected_genes <- which(abs(best_individual) > 1e-6) selected_gene_names <- rownames(genomic_data)[selected_genes]  cat(\"Number of selected genes:\", length(selected_genes), \"\\n\") #> Number of selected genes: 1000 cat(\"Selected gene names:\", head(selected_gene_names), \"...\\n\") #> Selected gene names: 1007_s_at 1053_at 117_at 121_at 1255_g_at 1294_at ..."},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"machine-learning-pipeline","dir":"Articles","previous_headings":"","what":"Machine Learning Pipeline","title":"Introduction to BioGA","text":"⚠️ part machine learning might take long time execute. However, provide examples pipeline code (eval=FALSE) . Data Preparation","code":"X <- t(genomic_data[selected_genes, ]) y <- as.factor(pData(geo_data)$`source_name_ch1`) # y <- pheno$Stage  # other example outcome: cancer stage (categorical) levels(y) <- make.names(levels(y))  set.seed(42) train_idx <- createDataPartition(y, p = 0.7, list = FALSE) X_train <- X[train_idx, ] X_test <- X[-train_idx, ] y_train <- y[train_idx] y_test <- y[-train_idx]"},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"training-and-evaluation","dir":"Articles","previous_headings":"Machine Learning Pipeline > Using CARET","what":"Training and Evaluation","title":"Introduction to BioGA","text":"","code":"# This part performs parallelized training and ROC evaluation  # of Random Forest, XGBoost, and Logistic Regression models using caret. # It uses cross-validation with ROC as the performance metric  # and plots ROC curves for both training and testing sets.  cl <- makeCluster(parallel::detectCores() - 1) registerDoParallel(cl)  ctrl <- trainControl(     method = \"repeatedcv\", number = 5, repeats = 3, classProbs = TRUE,     summaryFunction = twoClassSummary, allowParallel = TRUE)  set.seed(123) models <- list(     rf = train(X_train, y_train, method = \"rf\",         trControl = ctrl, metric = \"ROC\"),     xgb = train(X_train, y_train, method = \"xgbTree\",         trControl = ctrl, metric = \"ROC\"),     glm = train(X_train, y_train, method = \"glm\",         family = \"binomial\", trControl = ctrl, metric = \"ROC\"))  train_probs <- lapply(models, predict, newdata = X_train, type = \"prob\") test_probs  <- lapply(models, predict, newdata = X_test, type = \"prob\")  roc_train <- lapply(train_probs, function(p) roc(y_train, p[, 2])) roc_test  <- lapply(test_probs, function(p) roc(y_test, p[, 2]))  plot(roc_train$rf, col = \"darkred\", main = \"Train ROC Curves\") plot(roc_train$xgb, add = TRUE, col = \"darkgreen\") plot(roc_train$glm, add = TRUE, col = \"blue\")                       legend(\"bottomright\", c(\"RF\",\"XGB\",\"GLM\"),      col = c(\"darkred\", \"darkgreen\", \"blue\"), lwd = 2)  plot(roc_test$rf, col = \"darkred\", main = \"Test ROC Curves\") plot(roc_test$xgb, add = TRUE, col = \"darkgreen\") plot(roc_test$glm, add = TRUE, col = \"blue\")                         legend(\"bottomright\", c(\"RF\",\"XGB\",\"GLM\"),      col = c(\"darkred\",\"darkgreen\",\"blue\"), lwd = 2)  stopCluster(cl) registerDoSEQ() varImpPlot(models$rf$finalModel, n.var = 20,     main = \"Top 20 Optimized Features (Random Forest)\")"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"confusion-matrix","dir":"Articles","previous_headings":"Machine Learning Pipeline > Using CARET","what":"Confusion Matrix","title":"Introduction to BioGA","text":"","code":"pred_rf <- predict(models$rf, X_test) cm <- confusionMatrix(pred_rf, y_test) cm$table  fourfoldplot(cm$table, color = c(\"#99d8c9\", \"#fc9272\"),     conf.level = 0, margin = 1, main=\"Confusion Matrix RF Test Set\")"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"ensemble-stacking","dir":"Articles","previous_headings":"Machine Learning Pipeline","what":"Ensemble Stacking","title":"Introduction to BioGA","text":"","code":"cl <- makeCluster(parallel::detectCores() - 1) registerDoParallel(cl) models_list <- caretList(     x = X_train,     y = y_train,     trControl = trainControl(         method = \"repeatedcv\", number = 5, repeats = 3, classProbs = TRUE,          summaryFunction = twoClassSummary, allowParallel = TRUE),      methodList = c(\"glm\", \"xgbTree\"))  ensemble_model <- caretEnsemble(models_list) summary(ensemble_model)  # pred_ensemble <- predict(ensemble_model, newdata =head(X_test)) # confusionMatrix(pred_ensemble, y_test) stopCluster(cl) registerDoSEQ() plot(models_list) ggplot2::autoplot(ensemble_model) lattice::xyplot(caret::resamples(models_list))"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"alternative","dir":"Articles","previous_headings":"Machine Learning Pipeline","what":"Alternative","title":"Introduction to BioGA","text":"","code":"cl <- makeCluster(parallel::detectCores() - 1) registerDoParallel(cl) glm_model <- glm(Stage ~ .,     data = data.frame(Stage = y_train, X_train),     family = binomial())  label_train <- as.numeric(y_train) - 1 label_test <- as.numeric(y_test) - 1 dtrain <- xgb.DMatrix(data = as.matrix(X_train), label = label_train) dtest <- xgb.DMatrix(data = as.matrix(X_test), label = label_test)  params <- list(     objective = \"binary:logistic\", eval_metric = \"auc\",     max_depth = 6, eta = 0.1)  xgb_model <- xgb.train(params, dtrain,     nrounds = 100,     watchlist = list(train = dtrain), verbose = 0)  stopCluster(cl) registerDoSEQ() pred_prob_xgb <- predict(xgb_model, dtest) pred_prob_glm <- predict(glm_model, newdata = data.frame(X_test), type = \"response\")  roc_xgb <- pROC::roc(label_test, pred_prob_xgb) roc_glm <- pROC::roc(label_test, pred_prob_glm)  plot(roc_xgb, col = \"blue\", main = \"ROC Curves\") plot(roc_glm, col = \"red\", add = TRUE) legend(\"bottomright\", legend = c(\"XGBoost\", \"Logistic Regression\"), col = c(\"blue\", \"red\"), lwd = 2) cutoff_xgb <- coords(roc_xgb, \"best\", ret = \"threshold\") |> as.numeric() pred_class_xgb <- as.factor(ifelse(pred_prob_xgb > cutoff_xgb, levels(y)[2], levels(y)[1]))  conf_mat <- caret::confusionMatrix(pred_class_xgb, y_test) print(conf_mat)  fourfoldplot(conf_mat$table, color = c(\"#CC6666\", \"#99CC99\"), conf.level = 0, margin = 1, main = \"Confusion Matrix\")"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"shap-and-lime-explanation-of-xgboost-model","dir":"Articles","previous_headings":"Machine Learning Pipeline > Alternative","what":"SHAP and LIME Explanation of XGBoost Model","title":"Introduction to BioGA","text":"","code":"cl <- makeCluster(parallel::detectCores() - 1) registerDoParallel(cl)  # SHAP X_test_df <- as.data.frame(X_test) predictor <- Predictor$new(xgb_model, data = X_test_df, y = label_test,     predict.function = function(model, newdata) {         predict(model, xgb.DMatrix(as.matrix(newdata)))})  shap <- Shapley$new(predictor, x.interest = X_test_df[1, ]) plot(shap)  shap_values <- shap$results barplot(shap_values$phi, names.arg = shap_values$feature, las = 2, main = \"SHAP Values Waterfall\")  # LIME explanation explainer <- lime(X_train, xgb_model, bin_continuous = TRUE) explanation <- explain(X_test_df[1:3, ], explainer, n_features = 10) plot_features(explanation)  stopCluster(cl) registerDoSEQ()"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"calibration-plots","dir":"Articles","previous_headings":"Machine Learning Pipeline > Alternative","what":"Calibration Plots","title":"Introduction to BioGA","text":"","code":"calib <- caret::calibration(y_test ~ pred_prob_xgb, class = TRUE) xyplot(calib)"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"survival-analysis","dir":"Articles","previous_headings":"","what":"Survival Analysis","title":"Introduction to BioGA","text":"Mentioned Stage:ch1, higher stage treated “bad outcome” quick Cox model. Survival analysis clinical outcome prediction Using Selected Genes:","code":"options(expressions = 10000) surv_data <- data.frame(     time = pheno$time, status = pheno$status,     t(genomic_data[selected_genes, ])) cox_formula <- as.formula(paste(     \"Surv(time, status) ~\",     paste(colnames(surv_data)[-(1:2)], collapse = \"+\"))) cox_model <- coxph(cox_formula, data = surv_data) #> Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights, : #> Ran out of iterations and did not converge #> Warning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights, : #> one or more coefficients may be infinite  #summary(cox_model)  # Kaplan-Meier curve stratified by median risk score surv_data$risk_score <- predict(cox_model, surv_data, type = \"risk\") median_risk <- median(surv_data$risk_score) surv_data$risk_group <- ifelse(surv_data$risk_score > median_risk,     \"High Risk\", \"Low Risk\") fit <- survfit(Surv(time, status) ~ risk_group, data = surv_data) ggsurvplot(fit, data = surv_data, pval = TRUE, risk.table = TRUE)"},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"time-dependent-roc-for-survival","dir":"Articles","previous_headings":"","what":"Time-dependent ROC for Survival","title":"Introduction to BioGA","text":"","code":"time_roc <- timeROC(T = surv_data$time, delta = surv_data$status,     marker = surv_data$risk_score, cause = 1, times = c(365, 730, 1095)) plot(time_roc, time = 365)"},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"performance-benchmarking","dir":"Articles","previous_headings":"Results for the application of the pkg","what":"Performance Benchmarking","title":"Introduction to BioGA","text":"evaluate BioGA’s efficiency accuracy, conducted benchmarking experiments two widely used R packages: GA genalg. comparisons focused runtime solution quality across different genomic datasets. Two representative datasets used: TCGA-BRCA dataset, contains high-dimensional RNA-seq data breast cancer patients, GEO-GSE10072 dataset, smaller lung cancer gene expression set. methods configured identical hyperparameters—population size, number generations, fitness evaluation criteria—ensure fairness. Execution performed 16-core Intel Xeon workstation assess scalability parallelization benefits. Table 1 summarizes performance TCGA-BRCA dataset. BioGA outperformed tools achieving 3.7× speedup GA nearly 4× genalg, also delivering higher accuracy better sparsity selected gene sets. BioGA’s memory footprint significantly lower, highlighting efficient C++ backend optimized memory management. Notably, maintained favorable tradeoff sparsity (fewer genes) accuracy, crucial aspect biomarker discovery. Figure 3 illustrates BioGA scales increasing CPU cores. package demonstrated near-linear performance scaling, reducing runtime ~48s single core ~12s 16 cores. makes BioGA particularly well-suited large-scale genomic tasks time efficiency critical.","code":"#> [1] \"coming soon...\""},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"case-study-1-breast-cancer-biomarker-discovery","dir":"Articles","previous_headings":"Results for the application of the pkg > Biological Validation","what":"Case Study 1: Breast Cancer Biomarker Discovery","title":"Introduction to BioGA","text":"applied BioGA identify minimal gene signature differentiates HER2-positive HER2-negative breast cancer subtypes using TCGA-BRCA data. optimization guided multi-objective function prioritizing classification accuracy (α=0.7) sparsity, encouraging small yet informative gene sets. BioGA successfully derived 10-gene signature achieving 95% classification accuracy, outperforming conventional GA approaches. Importantly, 8 genes listed COSMIC Cancer Gene Census, reinforcing biological relevance selected subset. Enrichment analysis revealed significant involvement PI3K-Akt signaling pathway, well-known hallmark HER2-driven breast cancers. Pareto front (Figure X) showcases trade-solutions discovered BioGA, allowing users choose models best balance model simplicity predictive performance. Compared GA methods, BioGA’s solutions compact also biologically interpretable.","code":"#> [1] \"coming soon...\""},{"path":"https://danymukesha.github.io/BioGA/articles/BioGA.html","id":"case-study-2-single-cell-rna-seq-clustering-optimization","dir":"Articles","previous_headings":"Results for the application of the pkg > Biological Validation","what":"Case Study 2: Single-cell RNA-seq Clustering Optimization","title":"Introduction to BioGA","text":"test BioGA’s versatility beyond traditional bulk RNA-seq, applied 10X Genomics PBMC single-cell dataset, focusing clustering optimization. , objective maximize silhouette score minimizing number clusters, balance critical capturing biological structure without overfitting. BioGA demonstrated 7.8% improvement cluster purity compared standard methods like SC3. Furthermore, identified rare NK cell subpopulation representing less 1% sample—missed traditional algorithms. result underscores BioGA’s potential uncovering subtle biological patterns, especially high-noise settings like single-cell data. BioGA’s runtime (18.4 minutes) 2.7× faster SC3 (67.3 minutes), highlighting advantages parallelized C++ backend computationally demanding contexts clustering large single-cell datasets","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-07-09 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [1] RSPM #>  animation              2.7        2021-10-07 [1] RSPM #>  assertthat             0.2.1      2019-03-21 [1] RSPM #>  backports              1.5.0      2024-05-23 [1] RSPM #>  Biobase              * 2.68.0     2025-04-15 [1] Bioconduc~ #>  BiocGenerics         * 0.54.0     2025-04-15 [1] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [1] RSPM #>  BiocParallel         * 1.42.1     2025-06-01 [1] Bioconduc~ #>  BiocStyle            * 2.36.0     2025-04-15 [1] Bioconduc~ #>  biocViews              1.76.0     2025-04-15 [1] Bioconduc~ #>  BioGA                * 0.99.17    2025-07-09 [1] local #>  bitops                 1.0-9      2024-10-03 [1] RSPM #>  bookdown               0.43       2025-04-15 [1] RSPM #>  broom                  1.0.8      2025-03-28 [1] RSPM #>  bslib                  0.9.0      2025-01-30 [1] RSPM #>  cachem                 1.1.0      2024-05-16 [1] RSPM #>  car                    3.1-3      2024-09-27 [1] RSPM #>  carData                3.0-5      2022-01-06 [1] RSPM #>  caret                * 7.0-1      2024-12-10 [1] RSPM #>  caretEnsemble        * 4.0.1      2024-09-12 [1] RSPM #>  checkmate              2.3.2      2024-07-29 [1] RSPM #>  class                  7.3-23     2025-01-01 [3] CRAN (R 4.5.1) #>  cli                    3.6.5      2025-04-23 [1] RSPM #>  codetools              0.2-20     2024-03-31 [3] CRAN (R 4.5.1) #>  commonmark             2.0.0      2025-07-07 [1] RSPM #>  crayon                 1.5.3      2024-06-20 [1] RSPM #>  curl                   6.4.0      2025-06-22 [1] RSPM #>  data.table             1.17.6     2025-06-17 [1] RSPM #>  DelayedArray           0.34.1     2025-04-17 [1] Bioconduc~ #>  desc                   1.4.3      2023-12-10 [1] RSPM #>  digest                 0.6.37     2024-08-19 [1] RSPM #>  doParallel           * 1.0.17     2022-02-07 [1] RSPM #>  dplyr                * 1.1.4      2023-11-17 [1] RSPM #>  evaluate               1.0.4      2025-06-18 [1] RSPM #>  farver                 2.1.2      2024-05-13 [1] RSPM #>  fastmap                1.2.0      2024-05-15 [1] RSPM #>  foreach              * 1.5.2      2022-02-02 [1] RSPM #>  Formula                1.2-5      2023-02-24 [1] RSPM #>  fs                     1.6.6      2025-04-12 [1] RSPM #>  future                 1.58.0     2025-06-05 [1] RSPM #>  future.apply           1.20.0     2025-06-06 [1] RSPM #>  generics             * 0.1.4      2025-05-09 [1] RSPM #>  GenomeInfoDb         * 1.44.0     2025-04-15 [1] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-07-03 [1] Bioconductor #>  GenomicRanges        * 1.60.0     2025-04-15 [1] Bioconduc~ #>  GEOquery             * 2.76.0     2025-04-15 [1] Bioconduc~ #>  ggplot2              * 3.5.2      2025-04-09 [1] RSPM #>  ggpubr               * 0.6.1      2025-06-27 [1] RSPM #>  ggsignif               0.6.4      2022-10-13 [1] RSPM #>  ggtext                 0.1.2      2022-09-16 [1] RSPM #>  glmnet                 4.1-9      2025-06-02 [1] RSPM #>  globals                0.18.0     2025-05-08 [1] RSPM #>  glue                   1.8.0      2024-09-30 [1] RSPM #>  gower                  1.0.2      2024-12-17 [1] RSPM #>  graph                  1.86.0     2025-04-15 [1] Bioconduc~ #>  gridExtra              2.3        2017-09-09 [1] RSPM #>  gridtext               0.1.5      2022-09-16 [1] RSPM #>  gtable                 0.3.6      2024-10-25 [1] RSPM #>  hardhat                1.4.1      2025-01-31 [1] RSPM #>  hms                    1.1.3      2023-03-21 [1] RSPM #>  htmltools              0.5.8.1    2024-04-04 [1] RSPM #>  htmlwidgets            1.6.4      2023-12-06 [1] RSPM #>  httr                   1.4.7      2023-08-15 [1] RSPM #>  httr2                  1.1.2      2025-03-26 [1] RSPM #>  iml                  * 0.11.4     2025-02-24 [1] RSPM #>  ipred                  0.9-15     2024-07-18 [1] RSPM #>  IRanges              * 2.42.0     2025-04-15 [1] Bioconduc~ #>  iterators            * 1.0.14     2022-02-05 [1] RSPM #>  jquerylib              0.1.4      2021-04-26 [1] RSPM #>  jsonlite               2.0.0      2025-03-27 [1] RSPM #>  km.ci                  0.5-6      2022-04-06 [1] RSPM #>  KMsurv                 0.1-6      2025-05-20 [1] RSPM #>  knitr                  1.50       2025-03-16 [1] RSPM #>  labeling               0.4.3      2023-08-29 [1] RSPM #>  lattice              * 0.22-7     2025-04-02 [3] CRAN (R 4.5.1) #>  lava                   1.8.1      2025-01-12 [1] RSPM #>  lifecycle              1.0.4      2023-11-07 [1] RSPM #>  lime                 * 0.5.3      2022-08-19 [1] RSPM #>  limma                  3.64.1     2025-05-25 [1] Bioconduc~ #>  listenv                0.9.1      2024-01-29 [1] RSPM #>  litedown               0.7        2025-04-08 [1] RSPM #>  lubridate              1.9.4      2024-12-08 [1] RSPM #>  magrittr               2.0.3      2022-03-30 [1] RSPM #>  markdown               2.0        2025-03-23 [1] RSPM #>  MASS                   7.3-65     2025-02-28 [3] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [3] CRAN (R 4.5.1) #>  MatrixGenerics       * 1.20.0     2025-04-15 [1] Bioconduc~ #>  matrixStats          * 1.5.0      2025-01-07 [1] RSPM #>  Metrics                0.1.4      2018-07-09 [1] RSPM #>  ModelMetrics           1.2.2.2    2020-03-17 [1] RSPM #>  mvtnorm                1.3-3      2025-01-10 [1] RSPM #>  nlme                   3.1-168    2025-03-31 [3] CRAN (R 4.5.1) #>  nnet                   7.3-20     2025-01-01 [3] CRAN (R 4.5.1) #>  numDeriv               2016.8-1.1 2019-06-06 [1] RSPM #>  parallelly             1.45.0     2025-06-02 [1] RSPM #>  patchwork              1.3.1      2025-06-21 [1] RSPM #>  pec                    2023.04.12 2023-04-11 [1] RSPM #>  pheatmap             * 1.0.13     2025-06-05 [1] RSPM #>  pillar                 1.11.0     2025-07-04 [1] RSPM #>  pkgconfig              2.0.3      2019-09-22 [1] RSPM #>  pkgdown                2.1.3      2025-05-25 [1] any (@2.1.3) #>  plyr                   1.8.9      2023-10-02 [1] RSPM #>  pROC                 * 1.18.5     2023-11-01 [1] RSPM #>  prodlim                2025.04.28 2025-04-28 [1] RSPM #>  purrr                  1.0.4      2025-02-05 [1] RSPM #>  R.methodsS3            1.8.2      2022-06-13 [1] RSPM #>  R.oo                   1.27.1     2025-05-02 [1] RSPM #>  R.utils                2.13.0     2025-02-24 [1] RSPM #>  R6                     2.6.1      2025-02-15 [1] RSPM #>  ragg                   1.4.0      2025-04-10 [1] RSPM #>  randomForest         * 4.7-1.2    2024-09-22 [1] RSPM #>  rappdirs               0.3.3      2021-01-31 [1] RSPM #>  RBGL                   1.84.0     2025-04-15 [1] Bioconduc~ #>  RColorBrewer           1.1-3      2022-04-03 [1] RSPM #>  Rcpp                   1.1.0      2025-07-02 [1] RSPM #>  RcppParallel           5.1.10     2025-01-24 [1] RSPM #>  RCurl                  1.98-1.17  2025-03-22 [1] RSPM #>  readr                  2.1.5      2024-01-10 [1] RSPM #>  recipes                1.3.1      2025-05-21 [1] RSPM #>  rentrez                1.2.4      2025-06-11 [1] RSPM #>  reshape2               1.4.4      2020-04-09 [1] RSPM #>  rlang                  1.1.6      2025-04-11 [1] RSPM #>  rmarkdown              2.29       2024-11-04 [1] RSPM #>  rpart                  4.1.24     2025-01-07 [3] CRAN (R 4.5.1) #>  rstatix                0.7.2      2023-02-01 [1] RSPM #>  RUnit                  0.4.33.1   2025-06-17 [1] RSPM #>  S4Arrays               1.8.1      2025-06-01 [1] Bioconduc~ #>  S4Vectors            * 0.46.0     2025-04-15 [1] Bioconduc~ #>  sass                   0.4.10     2025-04-11 [1] RSPM #>  scales                 1.4.0      2025-04-24 [1] RSPM #>  sessioninfo            1.2.3      2025-02-05 [1] RSPM #>  shape                  1.4.6.1    2024-02-23 [1] RSPM #>  SparseArray            1.8.0      2025-04-15 [1] Bioconduc~ #>  statmod                1.5.0      2023-01-06 [1] RSPM #>  stringi                1.8.7      2025-03-27 [1] RSPM #>  stringr                1.5.1      2023-11-14 [1] RSPM #>  SummarizedExperiment * 1.38.1     2025-04-30 [1] Bioconduc~ #>  survival             * 3.8-3      2024-12-17 [3] CRAN (R 4.5.1) #>  survminer            * 0.5.0      2024-10-30 [1] RSPM #>  survMisc               0.5.6      2022-04-07 [1] RSPM #>  systemfonts            1.2.3      2025-04-30 [1] RSPM #>  textshaping            1.0.1      2025-05-01 [1] RSPM #>  tibble                 3.3.0      2025-06-08 [1] RSPM #>  tidyr                  1.3.1      2024-01-24 [1] RSPM #>  tidyselect             1.2.1      2024-03-11 [1] RSPM #>  timechange             0.3.0      2024-01-18 [1] RSPM #>  timeDate               4041.110   2024-09-22 [1] RSPM #>  timereg                2.0.6      2024-09-06 [1] RSPM #>  timeROC              * 0.4        2019-12-18 [1] RSPM #>  tzdb                   0.5.0      2025-03-15 [1] RSPM #>  UCSC.utils             1.4.0      2025-04-15 [1] Bioconduc~ #>  vctrs                  0.6.5      2023-12-01 [1] RSPM #>  withr                  3.0.2      2024-10-28 [1] RSPM #>  xfun                   0.52       2025-04-02 [1] RSPM #>  xgboost              * 1.7.11.1   2025-05-15 [1] RSPM #>  XML                    3.99-0.18  2025-01-01 [1] RSPM #>  xml2                   1.3.8      2025-03-14 [1] RSPM #>  xtable                 1.8-4      2019-04-21 [1] RSPM #>  XVector                0.48.0     2025-04-15 [1] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [1] RSPM #>  zoo                    1.8-14     2025-04-10 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.1/lib/R/site-library #>  [3] /opt/R/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"🔬 Introduction","title":"📄 Usage demonstration","text":"BioGA R package implementing genetic algorithm (GA) designed multi-objective optimization genomic data. can used : select gene signatures optimize biomarker panels balance objectives like expression distance, sparsity, custom criteria vignette walks example using real-world-like gene expression data demonstrates: ✅ GA initialization ✅ Evolution generations ✅ Fitness convergence ✅ Visualizations population diversity","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"📈 Prepare data","title":"📄 Usage demonstration","text":"’ll simulate realistic gene expression data:","code":"set.seed(123) n_genes <- 50 n_samples <- 20  # Simulate two classes: cases and controls class_labels <- rep(c(\"Control\", \"Case\"), each = 10) genomic_data <- matrix(rnorm(n_genes * n_samples, mean = 5, sd = 2),     nrow = n_genes, ncol = n_samples)  # Introduce differential expression in 10 genes for \"Case\" genomic_data[1:10, class_labels == \"Case\"] <-     genomic_data[1:10, class_labels == \"Case\"] + 3  rownames(genomic_data) <- paste0(\"Gene\", 1:n_genes) colnames(genomic_data) <- paste0(\"Sample\", 1:n_samples)  pheatmap(genomic_data,     cluster_rows = TRUE, cluster_cols = TRUE,     main = \"Simulated Gene Expression Data\")"},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"run-the-genetic-algorithm","dir":"Articles","previous_headings":"","what":"⚙ Run the genetic algorithm","title":"📄 Usage demonstration","text":"define parameters run BioGA:","code":"result <- bioga_main_cpp(     genomic_data = genomic_data,     population_size = 30,     num_generations = 50,     crossover_rate = 0.9,     eta_c = 20.0,     mutation_rate = 0.1,     num_parents = 20,     num_offspring = 20,     num_to_replace = 10,     weights = c(1.0, 0.5),     seed = 42 ) #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1"},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"visualize-convergence-of-fitness","dir":"Articles","previous_headings":"","what":"📊 Visualize convergence of fitness","title":"📄 Usage demonstration","text":"Let’s compute plot best fitness evolved.","code":"# Since BioGA currently does not return fitness history, # let’s re-run manually to track convergence:  track_fitness <- function(...) {     pop <- initialize_population_cpp(...)     best_fit <- c()     for (g in 1:50) {         fit <- evaluate_fitness_cpp(genomic_data, pop, weights = c(1.0, 0.5))         best_fit <- c(best_fit, min(fit[, 1])) # Track expression objective         parents <- selection_cpp(pop, fit, 20)         offspring <- crossover_cpp(parents, 20)         mutated <- mutation_cpp(offspring, 0.1, g, 50)         fit_off <- evaluate_fitness_cpp(genomic_data, mutated, c(1.0, 0.5))         pop <- replacement_cpp(pop, mutated, fit, fit_off, 10)     }     best_fit }  fitness_trace <- track_fitness(genomic_data, 30, 42) #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 1 #> Current front size: 1 #> Current front size: 1  qplot(1:50, fitness_trace, geom = \"line\") +     labs(x = \"Generation\", y = \"Best Fitness (Expression Diff.)\",         title = \"Convergence of Best Fitness Across Generations\")"},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"population-diversity-heatmap","dir":"Articles","previous_headings":"","what":"🎨 Population diversity heatmap","title":"📄 Usage demonstration","text":"Visualize population final generation","code":"pheatmap(result$population,     main = \"Final Population of Individuals\",     cluster_rows = TRUE, cluster_cols = TRUE)"},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"compare-gene-selection-frequency","dir":"Articles","previous_headings":"","what":"🧬 Compare gene selection frequency","title":"📄 Usage demonstration","text":"","code":"gene_selection_freq <- colMeans(result$population != 0)  barplot(gene_selection_freq, las = 2,          main = \"Frequency of Gene Selection in Final Population\",         ylab = \"Selection Frequency\")"},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"network-constraint-example-optional","dir":"Articles","previous_headings":"","what":"🌐 Network constraint example (optional)","title":"📄 Usage demonstration","text":"network, e.g. co-expression network:","code":"network_mat <- matrix(runif(n_genes^2, 0, 1), nrow = n_genes) diag(network_mat) <- 0  mutated_with_net <- mutation_cpp(result$population,     mutation_rate = 0.1,     iteration = 10,     max_iterations = 50,     network = network_mat)  pheatmap(mutated_with_net,     main = \"Population After Mutation with Network Constraint\")"},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"summary","dir":"Articles","previous_headings":"","what":"📌 Summary","title":"📄 Usage demonstration","text":"vignette, : simulated realistic genomic data ran BioGA multi-objective optimization tracked fitness convergence visualized population diversity gene selection","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"next-steps","dir":"Articles","previous_headings":"📌 Summary","what":"➡ Next steps","title":"📄 Usage demonstration","text":"can: ✅ Replace simulated data real RNA-seq microarray data ✅ Define custom network constraints (e.g. STRING BioGRID) ✅ Extend objectives (e.g. clinical outcome correlation)","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"final-tip","dir":"Articles","previous_headings":"","what":"💡 Final tip","title":"📄 Usage demonstration","text":"larger datasets, recommend: using RcppParallel::setThreadOptions() set threads saving intermediate generations want reproducibility debugging","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"how-to-use-this-vignette","dir":"Articles","previous_headings":"💡 Final tip","what":"📁 How to use this vignette","title":"📄 Usage demonstration","text":"Save vignettes/bioga-demo.Rmd, generate :","code":"devtools::build_vignettes()"},{"path":"https://danymukesha.github.io/BioGA/articles/demo.html","id":"want-help-improving-this-further","dir":"Articles","previous_headings":"","what":"✉ Want help improving this further?","title":"📄 Usage demonstration","text":"👉 Contact : danymukesha@gmail.com","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-07-09 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package              * version    date (UTC) lib source #>  abind                  1.4-8      2024-09-12 [1] RSPM #>  animation              2.7        2021-10-07 [1] RSPM #>  assertthat             0.2.1      2019-03-21 [1] RSPM #>  backports              1.5.0      2024-05-23 [1] RSPM #>  Biobase                2.68.0     2025-04-15 [1] Bioconduc~ #>  BiocGenerics           0.54.0     2025-04-15 [1] Bioconduc~ #>  BiocManager            1.30.26    2025-06-05 [1] RSPM #>  BiocParallel           1.42.1     2025-06-01 [1] Bioconduc~ #>  BiocStyle            * 2.36.0     2025-04-15 [1] Bioconduc~ #>  biocViews              1.76.0     2025-04-15 [1] Bioconduc~ #>  BioGA                * 0.99.17    2025-07-09 [1] local #>  bitops                 1.0-9      2024-10-03 [1] RSPM #>  bookdown               0.43       2025-04-15 [1] RSPM #>  broom                  1.0.8      2025-03-28 [1] RSPM #>  bslib                  0.9.0      2025-01-30 [1] RSPM #>  cachem                 1.1.0      2024-05-16 [1] RSPM #>  car                    3.1-3      2024-09-27 [1] RSPM #>  carData                3.0-5      2022-01-06 [1] RSPM #>  caret                  7.0-1      2024-12-10 [1] RSPM #>  caretEnsemble          4.0.1      2024-09-12 [1] RSPM #>  checkmate              2.3.2      2024-07-29 [1] RSPM #>  class                  7.3-23     2025-01-01 [3] CRAN (R 4.5.1) #>  cli                    3.6.5      2025-04-23 [1] RSPM #>  codetools              0.2-20     2024-03-31 [3] CRAN (R 4.5.1) #>  crayon                 1.5.3      2024-06-20 [1] RSPM #>  data.table             1.17.6     2025-06-17 [1] RSPM #>  DelayedArray           0.34.1     2025-04-17 [1] Bioconduc~ #>  desc                   1.4.3      2023-12-10 [1] RSPM #>  digest                 0.6.37     2024-08-19 [1] RSPM #>  doParallel             1.0.17     2022-02-07 [1] RSPM #>  dplyr                * 1.1.4      2023-11-17 [1] RSPM #>  evaluate               1.0.4      2025-06-18 [1] RSPM #>  farver                 2.1.2      2024-05-13 [1] RSPM #>  fastmap                1.2.0      2024-05-15 [1] RSPM #>  foreach                1.5.2      2022-02-02 [1] RSPM #>  Formula                1.2-5      2023-02-24 [1] RSPM #>  fs                     1.6.6      2025-04-12 [1] RSPM #>  future                 1.58.0     2025-06-05 [1] RSPM #>  future.apply           1.20.0     2025-06-06 [1] RSPM #>  generics               0.1.4      2025-05-09 [1] RSPM #>  GenomeInfoDb           1.44.0     2025-04-15 [1] Bioconduc~ #>  GenomeInfoDbData       1.2.14     2025-07-03 [1] Bioconductor #>  GenomicRanges          1.60.0     2025-04-15 [1] Bioconduc~ #>  GEOquery               2.76.0     2025-04-15 [1] Bioconduc~ #>  ggplot2              * 3.5.2      2025-04-09 [1] RSPM #>  ggpubr                 0.6.1      2025-06-27 [1] RSPM #>  ggsignif               0.6.4      2022-10-13 [1] RSPM #>  glmnet                 4.1-9      2025-06-02 [1] RSPM #>  globals                0.18.0     2025-05-08 [1] RSPM #>  glue                   1.8.0      2024-09-30 [1] RSPM #>  gower                  1.0.2      2024-12-17 [1] RSPM #>  graph                  1.86.0     2025-04-15 [1] Bioconduc~ #>  gridExtra              2.3        2017-09-09 [1] RSPM #>  gtable                 0.3.6      2024-10-25 [1] RSPM #>  hardhat                1.4.1      2025-01-31 [1] RSPM #>  hms                    1.1.3      2023-03-21 [1] RSPM #>  htmltools              0.5.8.1    2024-04-04 [1] RSPM #>  htmlwidgets            1.6.4      2023-12-06 [1] RSPM #>  httr                   1.4.7      2023-08-15 [1] RSPM #>  iml                    0.11.4     2025-02-24 [1] RSPM #>  ipred                  0.9-15     2024-07-18 [1] RSPM #>  IRanges                2.42.0     2025-04-15 [1] Bioconduc~ #>  iterators              1.0.14     2022-02-05 [1] RSPM #>  jquerylib              0.1.4      2021-04-26 [1] RSPM #>  jsonlite               2.0.0      2025-03-27 [1] RSPM #>  km.ci                  0.5-6      2022-04-06 [1] RSPM #>  KMsurv                 0.1-6      2025-05-20 [1] RSPM #>  knitr                  1.50       2025-03-16 [1] RSPM #>  labeling               0.4.3      2023-08-29 [1] RSPM #>  lattice                0.22-7     2025-04-02 [3] CRAN (R 4.5.1) #>  lava                   1.8.1      2025-01-12 [1] RSPM #>  lifecycle              1.0.4      2023-11-07 [1] RSPM #>  lime                   0.5.3      2022-08-19 [1] RSPM #>  limma                  3.64.1     2025-05-25 [1] Bioconduc~ #>  listenv                0.9.1      2024-01-29 [1] RSPM #>  lubridate              1.9.4      2024-12-08 [1] RSPM #>  magrittr               2.0.3      2022-03-30 [1] RSPM #>  MASS                   7.3-65     2025-02-28 [3] CRAN (R 4.5.1) #>  Matrix                 1.7-3      2025-03-11 [3] CRAN (R 4.5.1) #>  MatrixGenerics         1.20.0     2025-04-15 [1] Bioconduc~ #>  matrixStats            1.5.0      2025-01-07 [1] RSPM #>  Metrics                0.1.4      2018-07-09 [1] RSPM #>  ModelMetrics           1.2.2.2    2020-03-17 [1] RSPM #>  mvtnorm                1.3-3      2025-01-10 [1] RSPM #>  nlme                   3.1-168    2025-03-31 [3] CRAN (R 4.5.1) #>  nnet                   7.3-20     2025-01-01 [3] CRAN (R 4.5.1) #>  numDeriv               2016.8-1.1 2019-06-06 [1] RSPM #>  parallelly             1.45.0     2025-06-02 [1] RSPM #>  patchwork              1.3.1      2025-06-21 [1] RSPM #>  pec                    2023.04.12 2023-04-11 [1] RSPM #>  pheatmap             * 1.0.13     2025-06-05 [1] RSPM #>  pillar                 1.11.0     2025-07-04 [1] RSPM #>  pkgconfig              2.0.3      2019-09-22 [1] RSPM #>  pkgdown                2.1.3      2025-05-25 [1] any (@2.1.3) #>  plyr                   1.8.9      2023-10-02 [1] RSPM #>  pROC                   1.18.5     2023-11-01 [1] RSPM #>  prodlim                2025.04.28 2025-04-28 [1] RSPM #>  purrr                  1.0.4      2025-02-05 [1] RSPM #>  R6                     2.6.1      2025-02-15 [1] RSPM #>  ragg                   1.4.0      2025-04-10 [1] RSPM #>  randomForest           4.7-1.2    2024-09-22 [1] RSPM #>  RBGL                   1.84.0     2025-04-15 [1] Bioconduc~ #>  RColorBrewer           1.1-3      2022-04-03 [1] RSPM #>  Rcpp                   1.1.0      2025-07-02 [1] RSPM #>  RcppParallel           5.1.10     2025-01-24 [1] RSPM #>  RCurl                  1.98-1.17  2025-03-22 [1] RSPM #>  readr                  2.1.5      2024-01-10 [1] RSPM #>  recipes                1.3.1      2025-05-21 [1] RSPM #>  rentrez                1.2.4      2025-06-11 [1] RSPM #>  reshape2               1.4.4      2020-04-09 [1] RSPM #>  rlang                  1.1.6      2025-04-11 [1] RSPM #>  rmarkdown              2.29       2024-11-04 [1] RSPM #>  rpart                  4.1.24     2025-01-07 [3] CRAN (R 4.5.1) #>  rstatix                0.7.2      2023-02-01 [1] RSPM #>  RUnit                  0.4.33.1   2025-06-17 [1] RSPM #>  S4Arrays               1.8.1      2025-06-01 [1] Bioconduc~ #>  S4Vectors              0.46.0     2025-04-15 [1] Bioconduc~ #>  sass                   0.4.10     2025-04-11 [1] RSPM #>  scales                 1.4.0      2025-04-24 [1] RSPM #>  sessioninfo            1.2.3      2025-02-05 [1] RSPM #>  shape                  1.4.6.1    2024-02-23 [1] RSPM #>  SparseArray            1.8.0      2025-04-15 [1] Bioconduc~ #>  statmod                1.5.0      2023-01-06 [1] RSPM #>  stringi                1.8.7      2025-03-27 [1] RSPM #>  stringr                1.5.1      2023-11-14 [1] RSPM #>  SummarizedExperiment   1.38.1     2025-04-30 [1] Bioconduc~ #>  survival               3.8-3      2024-12-17 [3] CRAN (R 4.5.1) #>  survminer              0.5.0      2024-10-30 [1] RSPM #>  survMisc               0.5.6      2022-04-07 [1] RSPM #>  systemfonts            1.2.3      2025-04-30 [1] RSPM #>  textshaping            1.0.1      2025-05-01 [1] RSPM #>  tibble                 3.3.0      2025-06-08 [1] RSPM #>  tidyr                  1.3.1      2024-01-24 [1] RSPM #>  tidyselect             1.2.1      2024-03-11 [1] RSPM #>  timechange             0.3.0      2024-01-18 [1] RSPM #>  timeDate               4041.110   2024-09-22 [1] RSPM #>  timereg                2.0.6      2024-09-06 [1] RSPM #>  timeROC                0.4        2019-12-18 [1] RSPM #>  tzdb                   0.5.0      2025-03-15 [1] RSPM #>  UCSC.utils             1.4.0      2025-04-15 [1] Bioconduc~ #>  vctrs                  0.6.5      2023-12-01 [1] RSPM #>  withr                  3.0.2      2024-10-28 [1] RSPM #>  xfun                   0.52       2025-04-02 [1] RSPM #>  xgboost                1.7.11.1   2025-05-15 [1] RSPM #>  XML                    3.99-0.18  2025-01-01 [1] RSPM #>  xml2                   1.3.8      2025-03-14 [1] RSPM #>  xtable                 1.8-4      2019-04-21 [1] RSPM #>  XVector                0.48.0     2025-04-15 [1] Bioconduc~ #>  yaml                   2.3.10     2024-07-26 [1] RSPM #>  zoo                    1.8-14     2025-04-10 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.1/lib/R/site-library #>  [3] /opt/R/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"📐 Mathematical Behind","text":"report provides detailed mathematical analysis BioGA R package, implements multi-objective genetic algorithm (GA) genomic data optimization. analysis covers major components algorithm formal mathematical notation proofs applicable.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"genetic-algorithm-framework","dir":"Articles","previous_headings":"","what":"Genetic Algorithm Framework","title":"📐 Mathematical Behind","text":"package implements standard generational GA following components: Population Initialization Fitness Evaluation Selection (NSGA-II inspired) Crossover (SBX) Mutation (Adaptive) Replacement (Elitism + Diversity Preservation)","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"mathematical-representation","dir":"Articles","previous_headings":"Genetic Algorithm Framework","what":"Mathematical Representation","title":"📐 Mathematical Behind","text":"Let: G=(V,E)G = (V, E) gene network V={g1,g2,…,gn}V = \\{g_1, g_2, \\ldots, g_n\\} genes X∈ℝn×mX \\\\mathbb{R}^{n \\times m} genomic data matrix (nn genes × mm samples) Pt∈ℝp×nP_t \\\\mathbb{R}^{p \\times n} population generation tt (pp individuals × nn genes) GA can represented : Pt+1=R(M(C(S(Pt,f(Pt)),X)),Pt,f(Pt)) P_{t+1} = R(M(C(S(P_t, f(P_t)), X)), P_t, f(P_t)) : ff: Fitness evaluation function SS: Selection operator CC: Crossover operator MM: Mutation operator RR: Replacement operator","code":""},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"mathematical-formulation","dir":"Articles","previous_headings":"Population Initialization","what":"Mathematical Formulation","title":"📐 Mathematical Behind","text":"Given genomic data X∈ℝn×mX \\\\mathbb{R}^{n \\times m} population size pp: P0[,j]=X[j,k]wherek∼Uniform{1,…,m} P_0[,j] = X[j, k] \\quad \\text{} \\quad k \\sim \\text{Uniform}\\{1, \\ldots, m\\} clustering (provided): cluster c∈Cc \\C: P0[,j]=X[j,k]∀j∈c,k∼Uniform{1,…,m} P_0[,j] = X[j, k] \\quad \\forall j \\c, \\quad k \\sim \\text{Uniform}\\{1, \\ldots, m\\}","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"properties","dir":"Articles","previous_headings":"Population Initialization","what":"Properties","title":"📐 Mathematical Behind","text":"Maintains original data distribution per gene Preserves cluster structure provided Expected value: 𝔼[P0[,j]]=μj\\mathbb{E}[P_0[,j]] = \\mu_j (mean gene jj)","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"fitness-evaluation","dir":"Articles","previous_headings":"","what":"Fitness Evaluation","title":"📐 Mathematical Behind","text":"package implements multi-objective fitness function two components:","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"objective-1-expression-difference","dir":"Articles","previous_headings":"Fitness Evaluation","what":"Objective 1: Expression Difference","title":"📐 Mathematical Behind","text":"f1()=∑j∑k(Xjk−Pij)2 f_1() = \\sum_j \\sum_k (X_{jk} - P_{ij})^2 measures well individual matches observed expression patterns. Properties: Convex function minimum Pij=μjP_{ij} = \\mu_j Gradient: ∇f1=−2∑k(Xjk−Pij)\\nabla f_1 = -2\\sum_k(X_{jk} - P_{ij})","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"objective-2-sparsity","dir":"Articles","previous_headings":"Fitness Evaluation","what":"Objective 2: Sparsity","title":"📐 Mathematical Behind","text":"f2()=∑jI(|Pij|>ϵ)n f_2() = \\frac{\\sum_j (|P_{ij}| > \\epsilon)}{n} II indicator function ϵ\\epsilon small constant (10−610^{-6}). Properties: Non-convex, non-differentiable Encourages sparse solutions Range: [0,1][0, 1]","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"combined-fitness","dir":"Articles","previous_headings":"Fitness Evaluation","what":"Combined Fitness","title":"📐 Mathematical Behind","text":"F()=w1f1()+w2f2() F() = w_1f_1() + w_2f_2() ww user-provided weights.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"selection-nsga-ii-inspired","dir":"Articles","previous_headings":"","what":"Selection (NSGA-II Inspired)","title":"📐 Mathematical Behind","text":"selection implements simplified version NSGA-II’s non-dominated sorting:","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"domination-criteria","dir":"Articles","previous_headings":"Selection (NSGA-II Inspired)","what":"Domination Criteria","title":"📐 Mathematical Behind","text":"Individual ii dominates jj iff: ∀k:fk()≤fk(j)∃k:fk()<fk(j) \\forall k: f_k() \\leq f_k(j) \\quad \\text{} \\quad \\exists k: f_k() < f_k(j) Proof Partial Order: Reflexive: individual dominates Antisymmetric: ii dominates jj, jj dominate ii Transitive: ii dominates jj jj dominates kk, ii dominates kk","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"front-construction","dir":"Articles","previous_headings":"Selection (NSGA-II Inspired)","what":"Front Construction","title":"📐 Mathematical Behind","text":"Compute domination counts dominated sets First front: Individuals domination count =0= 0 Subsequent fronts: Remove current front, update counts Theorem: front construction algorithm terminates O(p2o)O(p^2o) time pp population size oo number objectives. Proof: Domination check two individuals O(o)O(o) pairs check O(p2o)O(p^2o) Front construction O(p)O(p) per front","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"crossover-simulated-binary-crossover---sbx","dir":"Articles","previous_headings":"","what":"Crossover (Simulated Binary Crossover - SBX)","title":"📐 Mathematical Behind","text":"Given parents x,y∈ℝnx, y \\\\mathbb{R}^n, create offspring zz: gene jj: probability pcp_c: u∼Uniform(0,1)β={(2u)1/(η+1)u≤0.5(12(1−u))1/(η+1)otherwisezj=0.5[(xj+yj)−β|yj−xj|] \\begin{aligned} u &\\sim \\text{Uniform}(0,1) \\\\ \\beta &= \\begin{cases} (2u)^{1/(\\eta+1)} & \\text{} u \\leq 0.5 \\\\ \\left(\\frac{1}{2(1-u)}\\right)^{1/(\\eta+1)} & \\text{otherwise} \\end{cases} \\\\ z_j &= 0.5[(x_j + y_j) - \\beta|y_j - x_j|] \\end{aligned}  Else: zj=xj z_j = x_j Properties: Preserves mean: 𝔼[zj]=xj+yj2\\mathbb{E}[z_j] = \\frac{x_j + y_j}{2} Variance controlled η\\eta (distribution index) η→0\\eta \\0: approaches uniform crossover η→∞\\eta \\\\infty: approaches crossover (z=xz = x yy)","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"mutation","dir":"Articles","previous_headings":"","what":"Mutation","title":"📐 Mathematical Behind","text":"Adaptive mutation network constraints: gene jj: probability pm(t)=p0(1+0.5t/T)p_m(t) = p_0(1 + 0.5t/T): Δj∼N(0,σ2)network provided:zj←zj+Δj(1−∑kNjkzk)Else:zj←zj+Δj \\begin{aligned} \\Delta_j &\\sim N(0, \\sigma^2) \\\\ \\text{network provided:} & \\quad z_j \\leftarrow z_j + \\Delta_j(1 - \\sum_k N_{jk}z_k) \\\\ \\text{Else:} & \\quad z_j \\leftarrow z_j + \\Delta_j \\end{aligned} Properties: Mutation rate increases generation tt Network term reduces mutation magnitude highly connected genes Expected change: 𝔼[Δzj]=0\\mathbb{E}[\\Delta z_j] = 0 Variance: Var(Δzj)=σ2(1−∑kNjkzk)2\\text{Var}(\\Delta z_j) = \\sigma^2(1 - \\sum_k N_{jk}z_k)^2 network provided","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"replacement","dir":"Articles","previous_headings":"","what":"Replacement","title":"📐 Mathematical Behind","text":"Elitism + diversity-preserving replacement: Keep best individual: x*=argmin f1(x)x^* = \\text{argmin } f_1(x) Select random individual xx Select offspring yy Replace xx yy diversity(x,y)>ϵ\\text{diversity}(x,y) > \\epsilon diversity(x,y)=∥x−y∥22\\text{diversity}(x,y) = \\|x - y\\|_2^2 Theorem: strategy preserves elitism maintaining population diversity. Proof: Best solution never lost Expected diversity non-decreasing since replacements occur diversity increases","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"convergence-analysis","dir":"Articles","previous_headings":"","what":"Convergence Analysis","title":"📐 Mathematical Behind","text":"algorithm can shown converge certain conditions: Assumptions: Finite search space Strictly positive mutation probability 3. Elitism maintained Theorem: algorithm converges probability Pareto front. Proof Sketch: selection replacement strategies preserve Pareto optimal solutions (elitism) Mutation provides ergodicity (state reachable) multi-objective GA convergence theorems (Rudolph 1998), algorithm converges Pareto front","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"computational-complexity","dir":"Articles","previous_headings":"","what":"Computational Complexity","title":"📐 Mathematical Behind","text":"Let: - pp = population size - nn = number genes - mm = number samples - oo = number objectives - TT = number generations Component Complexities: Initialization: O(pn)O(pn) Fitness Evaluation: O(Tpmn)O(Tpmn) (parallelized) Selection: O(Tp2o)O(Tp^2o) worst case Crossover: O(Tpn)O(Tpn) Mutation: O(Tpn)O(Tpn) Replacement: O(Tpn)O(Tpn) Total Complexity: O(Tp(po+mn))O(Tp(po + mn))","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"mathematical-optimization-interpretation","dir":"Articles","previous_headings":"","what":"Mathematical Optimization Interpretation","title":"📐 Mathematical Behind","text":"algorithm can viewed stochastic optimization method : minimize (f1(P),f2(P))subject P∈ℝp×n \\begin{aligned} \\text{minimize } & (f_1(P), f_2(P)) \\\\ \\text{subject } & P \\\\mathbb{R}^{p \\times n} \\end{aligned} : - f1f_1 measures data fidelity - f2f_2 measures sparsity GA approach particularly suitable : problem multi-objective search space high-dimensional fitness landscape may non-convex Sparsity objective non-differentiable","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"special-cases-and-relationships","dir":"Articles","previous_headings":"","what":"Special Cases and Relationships","title":"📐 Mathematical Behind","text":"Reduces nonlinear least squares optimization GA serves global optimizer avoiding local minima Mutation becomes standard Gaussian mutation Problem decomposes genes Approaches recombination-based search Faster convergence reduced diversity","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"biological-interpretation","dir":"Articles","previous_headings":"","what":"Biological Interpretation","title":"📐 Mathematical Behind","text":"mathematical operations correspond biological concepts: Population Initialization: Sampling observed biological variability Fitness: Measuring functional efficacy (expression matching) parsimony (sparsity) Network Constraints: Incorporating known gene-gene interactions Clustering: Respecting co-expressed gene modules","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/math.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"📐 Mathematical Behind","text":"mathematical foundation shows BioGA package implements theoretically sound multi-objective evolutionary algorithm genomic data optimization, proper attention computational efficiency biological relevance.","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-07-09 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package     * version date (UTC) lib source #>  BiocManager   1.30.26 2025-06-05 [1] RSPM #>  BiocStyle   * 2.36.0  2025-04-15 [1] Bioconduc~ #>  bookdown      0.43    2025-04-15 [1] RSPM #>  bslib         0.9.0   2025-01-30 [1] RSPM #>  cachem        1.1.0   2024-05-16 [1] RSPM #>  cli           3.6.5   2025-04-23 [1] RSPM #>  desc          1.4.3   2023-12-10 [1] RSPM #>  digest        0.6.37  2024-08-19 [1] RSPM #>  evaluate      1.0.4   2025-06-18 [1] RSPM #>  fastmap       1.2.0   2024-05-15 [1] RSPM #>  fs            1.6.6   2025-04-12 [1] RSPM #>  htmltools     0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets   1.6.4   2023-12-06 [1] RSPM #>  jquerylib     0.1.4   2021-04-26 [1] RSPM #>  jsonlite      2.0.0   2025-03-27 [1] RSPM #>  knitr         1.50    2025-03-16 [1] RSPM #>  lifecycle     1.0.4   2023-11-07 [1] RSPM #>  pkgdown       2.1.3   2025-05-25 [1] any (@2.1.3) #>  R6            2.6.1   2025-02-15 [1] RSPM #>  ragg          1.4.0   2025-04-10 [1] RSPM #>  rlang         1.1.6   2025-04-11 [1] RSPM #>  rmarkdown     2.29    2024-11-04 [1] RSPM #>  sass          0.4.10  2025-04-11 [1] RSPM #>  sessioninfo   1.2.3   2025-02-05 [1] RSPM #>  systemfonts   1.2.3   2025-04-30 [1] RSPM #>  textshaping   1.0.1   2025-05-01 [1] RSPM #>  xfun          0.52    2025-04-02 [1] RSPM #>  yaml          2.3.10  2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.1/lib/R/site-library #>  [3] /opt/R/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://danymukesha.github.io/BioGA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dany Mukesha. Author, maintainer.","code":""},{"path":"https://danymukesha.github.io/BioGA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mukesha D (2024). “Scalable Interpretable Genetic Algorithm Framework High-Throughput Genomic Data.” Zenodo. doi:10.5281/zenodo.15801072, https://doi.org/10.5281/zenodo.15801072. Mukesha D (2024). BioGA: Bioinformatics Genetic Algorithm (BioGA). doi:10.18129/B9.bioc.BioGA, R package version 1.0.0, https://danymukesha.github.io/BioGA/.","code":"@Article{,   title = {Scalable and Interpretable Genetic Algorithm Framework for High-Throughput Genomic Data},   author = {Dany Mukesha},   year = {2024},   journal = {Zenodo},   doi = {10.5281/zenodo.15801072},   url = {https://doi.org/10.5281/zenodo.15801072}, } @Manual{,   title = {BioGA: Bioinformatics Genetic Algorithm (BioGA)},   author = {Dany Mukesha},   year = {2024},   journal = {Bioconductor},   note = {R package version 1.0.0},   doi = {10.18129/B9.bioc.BioGA},   url = {https://danymukesha.github.io/BioGA/}, }"},{"path":"https://danymukesha.github.io/BioGA/index.html","id":"bioga-","dir":"","previous_headings":"","what":"Bioinformatics Genetic Algorithm (BioGA)","title":"Bioinformatics Genetic Algorithm (BioGA)","text":"BioGA package provides set functions genetic algorithm optimization adapted analyzing high throughput genomic data. functions implemented C++ improved speed efficiency, easy--use interface use within R.","code":""},{"path":"https://danymukesha.github.io/BioGA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bioinformatics Genetic Algorithm (BioGA)","text":"install package, start R (preferably version “4.4”) enter: can also install package directly GitHub using devtools package:","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # The following initializes usage of Bioc devel BiocManager::install(version='devel')  BiocManager::install(pkgs = \"BioGA\", version = \"devel\", force = TRUE) devtools::install_github(\"danymukesha/BioGA\")"},{"path":"https://danymukesha.github.io/BioGA/reference/BioGA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BioGA: Bioinformatics Genetic Algorithm (BioGA) — BioGA-package","title":"BioGA: Bioinformatics Genetic Algorithm (BioGA) — BioGA-package","text":"Genetic algorithm class optimization algorithms inspired process natural selection genetics. package allows users analyze optimize high throughput genomic data using genetic algorithms. functions provided implemented C++ improved speed efficiency, easy--use interface use within R.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/reference/BioGA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BioGA: Bioinformatics Genetic Algorithm (BioGA) — BioGA-package","text":"Maintainer: Dany Mukesha danymukesha@gmail.com (ORCID)","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/bioga_main_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Main genetic algorithm loop for genomic data optimization — bioga_main_cpp","title":"Main genetic algorithm loop for genomic data optimization — bioga_main_cpp","text":"Main genetic algorithm loop genomic data optimization","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/bioga_main_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main genetic algorithm loop for genomic data optimization — bioga_main_cpp","text":"","code":"bioga_main_cpp(   genomic_data,   population_size,   num_generations,   crossover_rate,   eta_c,   mutation_rate,   num_parents,   num_offspring,   num_to_replace,   weights,   seed = NULL,   clusters = NULL,   network = NULL )"},{"path":"https://danymukesha.github.io/BioGA/reference/bioga_main_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main genetic algorithm loop for genomic data optimization — bioga_main_cpp","text":"genomic_data Numeric matrix genomic data (rows: genes, columns: samples). population_size Number individuals population. num_generations Number generations run. crossover_rate Probability crossover. eta_c SBX distribution index (default: 20.0). mutation_rate Base probability mutation. num_parents Number parents select per generation. num_offspring Number offspring generate per generation. num_to_replace Number individuals replace per generation. weights Numeric vector weights multi-objective fitness. seed Optional random seed reproducibility. clusters Optional vector gene cluster assignments. network Optional matrix gene network constraints.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/bioga_main_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main genetic algorithm loop for genomic data optimization — bioga_main_cpp","text":"List containing final population fitness scores.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/bioga_main_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main genetic algorithm loop for genomic data optimization — bioga_main_cpp","text":"","code":"genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) result <- BioGA::bioga_main_cpp(genomic_data, population_size = 50, num_generations = 10,         crossover_rate = 0.9, eta_c = 20.0, mutation_rate = 0.1,         num_parents = 20, num_offspring = 20, num_to_replace = 10,         weights = c(1.0, 0.5), seed = 123) #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 1 #> Current front size: 0 #> Warning: No non-dominated individuals found.     Using full population for selection. #> Current front size: 1 #> Current front size: 1"},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to perform simulated binary crossover (SBX) — crossover_cpp","title":"Function to perform simulated binary crossover (SBX) — crossover_cpp","text":"Function perform simulated binary crossover (SBX)","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to perform simulated binary crossover (SBX) — crossover_cpp","text":"","code":"crossover_cpp(   selected_parents,   offspring_size,   crossover_rate = 0.9,   eta_c = 20 )"},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to perform simulated binary crossover (SBX) — crossover_cpp","text":"selected_parents Numeric matrix selected individuals. offspring_size Number offspring generate. crossover_rate Probability crossover (default: 0.9). eta_c SBX distribution index (default: 20.0).","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to perform simulated binary crossover (SBX) — crossover_cpp","text":"Numeric matrix offspring.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to perform simulated binary crossover (SBX) — crossover_cpp","text":"","code":"genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,  population_size = 5) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population,  c(1.0, 0.5)) selected_parents <- BioGA::selection_cpp(population, fitness,  num_parents = 2) #> Current front size: 1 BioGA::crossover_cpp(selected_parents, offspring_size = 2) #>            [,1]      [,2]       [,3]       [,4]       [,5]      [,6]     [,7] #> [1,] -0.8366399 0.4341165 -0.5434423 -0.1996363 -0.9343821 0.7124227 1.201867 #> [2,] -0.8366399 0.4341165 -0.5434423 -0.1996363 -0.9343821 0.7124227 1.201867 #>           [,8]      [,9]      [,10] #> [1,] 0.2879157 0.1691907 -0.9783576 #> [2,] 0.2879157 0.1691907 -0.9783576"},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to evaluate fitness using genomic data with multi-objective support — evaluate_fitness_cpp","title":"Function to evaluate fitness using genomic data with multi-objective support — evaluate_fitness_cpp","text":"Function evaluate fitness using genomic data multi-objective support","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to evaluate fitness using genomic data with multi-objective support — evaluate_fitness_cpp","text":"","code":"evaluate_fitness_cpp(genomic_data, population, weights)"},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to evaluate fitness using genomic data with multi-objective support — evaluate_fitness_cpp","text":"genomic_data Numeric matrix genomic data (rows: genes, columns: samples). population Numeric matrix representing population individuals. weights Numeric vector weights multi-objective fitness (e.g., expression difference, sparsity).","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to evaluate fitness using genomic data with multi-objective support — evaluate_fitness_cpp","text":"Numeric matrix fitness scores (columns: objectives, rows: individuals).","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to evaluate fitness using genomic data with multi-objective support — evaluate_fitness_cpp","text":"","code":"genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,  population_size = 5) weights <- c(1.0, 0.5) # Weight for expression difference and sparsity BioGA::evaluate_fitness_cpp(genomic_data, population, weights) #>          [,1] [,2] #> [1,] 174.1882  0.5 #> [2,] 185.6447  0.5 #> [3,] 282.9144  0.5 #> [4,] 260.4805  0.5 #> [5,] 239.6672  0.5"},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to initialize population with optional gene clustering — initialize_population_cpp","title":"Function to initialize population with optional gene clustering — initialize_population_cpp","text":"Function initialize population optional gene clustering","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to initialize population with optional gene clustering — initialize_population_cpp","text":"","code":"initialize_population_cpp(   genomic_data,   population_size,   seed = NULL,   clusters = NULL )"},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to initialize population with optional gene clustering — initialize_population_cpp","text":"genomic_data Numeric matrix genomic data (rows: genes, columns: samples). population_size Number individuals population. seed Optional random seed reproducibility. clusters Optional vector gene cluster assignments.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to initialize population with optional gene clustering — initialize_population_cpp","text":"Numeric matrix initialized population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to initialize population with optional gene clustering — initialize_population_cpp","text":"","code":"genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) BioGA::initialize_population_cpp(genomic_data, population_size = 5,  seed = 123) #>            [,1]       [,2]      [,3]        [,4]       [,5]        [,6] #> [1,]  0.6644805 -0.3501541 0.2189152  0.07439935  0.3548044 -0.04733266 #> [2,] -0.3383459  0.5950387 0.3774680  0.27211081  2.5017651  0.65099328 #> [3,]  1.4264917  0.9967010 0.3774680 -0.06042597 -0.9732140  0.79157269 #> [4,] -0.3383459 -0.7006975 0.3774680 -0.08981425 -0.7795961  0.07504484 #> [5,] -0.6558381  0.5950387 0.2189152 -0.80241961  2.5017651  0.79416747 #>            [,7]       [,8]       [,9]      [,10] #> [1,] -0.9944350  1.2929929  1.0936361 -1.0047212 #> [2,] -0.3395090  0.9344820 -0.2306096  0.6982138 #> [3,] -0.9944350 -0.4153374  0.2909621 -0.3092672 #> [4,] -0.4927276 -0.5939900 -0.2306096 -0.0550220 #> [5,] -0.3395090 -1.3970639  0.2909621 -1.1124601"},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to mutate offspring with adaptive mutation and network constraints — mutation_cpp","title":"Function to mutate offspring with adaptive mutation and network constraints — mutation_cpp","text":"Function mutate offspring adaptive mutation network constraints","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to mutate offspring with adaptive mutation and network constraints — mutation_cpp","text":"","code":"mutation_cpp(   offspring,   mutation_rate,   iteration,   max_iterations,   network = NULL )"},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to mutate offspring with adaptive mutation and network constraints — mutation_cpp","text":"offspring Numeric matrix offspring. mutation_rate Base probability mutation. iteration Current GA iteration adaptive mutation. max_iterations Maximum number GA iterations. network Optional matrix gene network constraints (rows: genes, cols: genes).","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to mutate offspring with adaptive mutation and network constraints — mutation_cpp","text":"Numeric matrix mutated offspring.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to mutate offspring with adaptive mutation and network constraints — mutation_cpp","text":"","code":"genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,  population_size = 5) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population,  c(1.0, 0.5)) selected_parents <- BioGA::selection_cpp(population, fitness,  num_parents = 2) #> Current front size: 1 offspring <- BioGA::crossover_cpp(selected_parents,  offspring_size = 2) BioGA::mutation_cpp(offspring, mutation_rate = 0.1, iteration = 1,  max_iterations = 100) #>          [,1]      [,2]      [,3]       [,4]      [,5]       [,6]      [,7] #> [1,] 1.096839 -0.640706 0.1813035 -0.1388914 0.3796395 -0.5023235 0.8951257 #> [2,] 1.096839 -0.640706 0.1813035 -0.1388914 0.3796395 -0.5259514 0.8951257 #>           [,8]      [,9]     [,10] #> [1,] 0.6443765 0.5194072 0.6886403 #> [2,] 0.6443765 0.5194072 0.6886403"},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to replace population with elitism and diversity preservation — replacement_cpp","title":"Function to replace population with elitism and diversity preservation — replacement_cpp","text":"Function replace population elitism diversity preservation","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to replace population with elitism and diversity preservation — replacement_cpp","text":"","code":"replacement_cpp(   population,   offspring,   fitness,   offspring_fitness,   num_to_replace )"},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to replace population with elitism and diversity preservation — replacement_cpp","text":"population Numeric matrix individuals. offspring Numeric matrix offspring. fitness Numeric matrix population fitness scores. offspring_fitness Numeric matrix offspring fitness scores. num_to_replace Number individuals replace.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to replace population with elitism and diversity preservation — replacement_cpp","text":"Numeric matrix updated population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to replace population with elitism and diversity preservation — replacement_cpp","text":"","code":"genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,  population_size = 5) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population,  c(1.0, 0.5)) selected_parents <- BioGA::selection_cpp(population, fitness,  num_parents = 2) #> Current front size: 1 offspring <- BioGA::crossover_cpp(selected_parents, offspring_size = 2) offspring_fitness <- BioGA::evaluate_fitness_cpp(genomic_data, offspring,  c(1.0, 0.5)) BioGA::replacement_cpp(population, offspring, fitness, offspring_fitness,  num_to_replace = 1) #>            [,1]        [,2]       [,3]        [,4]       [,5]       [,6] #> [1,]  0.8846505 -0.49929202 -0.7886220 -0.09031959  0.6843094 -1.3952743 #> [2,]  1.6509075  0.48545998 -1.6674751 -0.50219872  1.4960607 -0.8953634 #> [3,]  0.8846505 -0.49929202 -0.7886220 -0.09031959  0.6843094 -1.3952743 #> [4,] -0.6111659  0.08920722 -0.5739735  0.61798582 -0.3439172 -0.8953634 #> [5,] -0.3887799 -1.53290200 -1.6674751 -0.32468591  0.3860266 -1.3952743 #>            [,7]        [,8]       [,9]       [,10] #> [1,]  0.8496430  0.05974994  0.1748027 -0.59461727 #> [2,]  0.1181445 -0.47624689  0.6007088  0.07455118 #> [3,]  0.8496430  0.05974994  0.1748027 -0.59461727 #> [4,] -1.3108015  0.13403865 -0.1009749 -1.75652740 #> [5,]  2.2930790  0.05974994  0.6007088 -0.71721816"},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to select individuals using NSGA-II non-dominated sorting — selection_cpp","title":"Function to select individuals using NSGA-II non-dominated sorting — selection_cpp","text":"Function select individuals using NSGA-II non-dominated sorting","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to select individuals using NSGA-II non-dominated sorting — selection_cpp","text":"","code":"selection_cpp(population, fitness, num_parents)"},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to select individuals using NSGA-II non-dominated sorting — selection_cpp","text":"population Numeric matrix individuals. fitness Numeric matrix fitness scores (columns: objectives). num_parents Number individuals select.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to select individuals using NSGA-II non-dominated sorting — selection_cpp","text":"Numeric matrix selected individuals.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to select individuals using NSGA-II non-dominated sorting — selection_cpp","text":"","code":"genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data,       population_size = 5) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population,       c(1.0, 0.5)) BioGA::selection_cpp(population, fitness, num_parents = 2) #> Current front size: 1 #>            [,1]      [,2]     [,3]      [,4]      [,5]       [,6]      [,7] #> [1,] -0.4356455 0.3461036 2.416773 -1.651049 0.1263159 0.05601673 0.5101325 #> [2,] -0.4356455 0.3461036 2.416773 -1.651049 0.1263159 0.05601673 0.5101325 #>            [,8]       [,9]     [,10] #> [1,] -0.4503386 -0.3497542 0.7564064 #> [2,] -0.4503386 -0.3497542 0.7564064"},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-09917","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.17","title":"BioGA 0.99.17","text":"Added: - Demo vignette BioGA. - Mathematical background vignette BioGA. Updated: - BioGA vignettes new examples explanations. - selection_cpp function improved performance bug fixes.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-09916","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.16","title":"BioGA 0.99.16","text":"UPDATE: test_crossover_cpp test verifies dimensions, value ranges, new parameters. Changes: - Added tests new parameters (crossover_rate, eta_c). - Verified offspring values lie within parent ranges (due SBX). - Included edge case test single parent zero crossover rate. - Simplified error/warning checks. UPDATE: test_selection_cpp test checks dimensions, parent selection, compatibility multi-objective fitness. Changes: - Updated handle multi-objective fitness matrix. - Verified selected parents exact copies population rows. - Added edge case test single individual single objective. - Removed redundant fitness evaluation test (already covered evaluate_fitness_cpp). UPDATE: test_mutation_cpp test checks dimensions, mutation effects, new parameters. Changes: - Added tests new parameters (iteration, max_iterations, network). - Verified zero mutation rate preserves offspring. - Tested network constraints extreme cases (zero full constraints). - Simplified error/warning checks. UPDATE/ADDED: test_replacement_cpp test checks dimensions, elite preservation, diversity. Changes: - Added test new function signature (requires fitness matrices). - Verified elite preservation based first objective. - Included edge case test zero replacements. - Added checks dimensions error-free execution. UPDATE: test_initialize_population_cpp test checks dimensions, value validity, new parameters. Changes: - Added test seed parameter ensure reproducibility. - Included test clusters parameter verify correct initialization. - Maintained tests dimensions value validity. - Added edge case test minimal input. UPDATE: test_bioga_main_cpp {PROVISIONAL} New test file created verify main GA loop. Feature: - Tests output structure (list population fitness). - Verifies dimensions population fitness matrices. - Checks optional parameters (clusters, network). - Includes edge case test minimal input. Test Package (test-BioGA-package.R) Created new version test overall package integrity ensure functions exported correctly. Feature: - Tests package loading function exports. - Verifies complete GA workflow without errors. - Ensures compatibility optimized functions.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-09915","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.15","title":"BioGA 0.99.15","text":"UPDATE: test_evaluate_fitness_cpp test checks dimensions, values, error-free execution. Changes: Updated test new matrix output (multiple objectives). Added checks non-negative fitness values (appropriate expression difference sparsity). Included edge case test minimal input. Removed redundant tryCatch simplified error/warning checks.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-09914","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.14","title":"BioGA 0.99.14","text":"Commit -m “New Feature - Main GA Loop” adding main GA loop function integrates components supports multi-objective optimization parallelization. Features: Integrates optimized components cohesive GA loop. Supports multi-objective optimization, gene networks, clustering. Returns final population fitness scores analysis.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-09913","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.13","title":"BioGA 0.99.13","text":"Commit -m “Optimized initialize_population.cpp” Improvements: Add option biologically informed initialization using gene clusters. Improve random seed handling reproducibility. Changes: Added optional random seed reproducibility. Included support gene clustering initialize biologically relevant populations. Improved code readability documentation.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-09912","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.12","title":"BioGA 0.99.12","text":"Commit -m “Optimized replacement.cpp” indentation adjustments","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-09911","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.11","title":"BioGA 0.99.11","text":"Commit -m “Optimized replacement.cpp” Improvements: Implement elitism preserve best individuals. Add diversity-based replacement avoid premature convergence. Changes: Added elitism preserve best individual. Included diversity-based replacement maintain population diversity. Updated use multi-objective fitness matrix.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-09910","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.10","title":"BioGA 0.99.10","text":"Commit -m “Optimized mutation.cpp” Improvements: Add adaptive mutation rate based iteration fitness stagnation. Incorporate gene network constraints (placeholder user-provided network). Changes: Added adaptive mutation rate based iteration progress. Included optional gene network constraints ensure biologically relevant mutations. Maintained compatibility existing functionality.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-0999","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.9","title":"BioGA 0.99.9","text":"Commit -m “Optimized selection.cpp” Improvements: Implement NSGA-II non-dominated sorting multi-objective optimization. Add tournament selection better diversity. Changes: Implemented NSGA-II non-dominated sorting multi-objective selection. Added tournament selection maintain diversity. Updated handle multi-objective fitness matrix.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-0998","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.8","title":"BioGA 0.99.8","text":"Commit -m “Optimized crossover.cpp” ” Improvements: Implement simulated binary crossover (SBX) better exploration. Add adaptive crossover rate based population diversity. Changes: Replaced simple averaging SBX crossover better exploration. Added adaptive crossover rate based population diversity. Included parameters crossover rate distribution index.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-0997","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.7","title":"BioGA 0.99.7","text":"Commit -m “Optimized evaluate_fitness.cpp” Improvements: Add multi-objective fitness evaluation (e.g., minimize expression difference maximize gene sparsity). Use vectorized operations faster computation. Add parallelization RcppParallel large datasets. Changes: Added multi-objective support (expression difference sparsity). Used RcppParallel parallel computation. Returned matrix fitness scores objective. Added weights parameter flexible objective prioritization.","code":""},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-0996","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.6","title":"BioGA 0.99.6","text":"add authors date vignettes? R version less 4.4","code":""},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-0994","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.4","title":"BioGA 0.99.4","text":"Fixed added updates requested Bioconductor Peer review","code":""},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-0992","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.2","title":"BioGA 0.99.2","text":"Fixed ERROR: System files ‘BioGA.Rproj’ found Git tracked.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/news/index.html","id":"bioga-0990","dir":"Changelog","previous_headings":"","what":"BioGA 0.99.0","title":"BioGA 0.99.0","text":"Added NEWS.md file track changes package.","code":""}]
