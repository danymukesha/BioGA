[{"path":"https://danymukesha.github.io/BioGA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Dany Mukesha Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/Overview.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Overview","text":"Genomic data refers genetic information stored organism’s DNA. includes sequence nucleotides (adenine, thymine, cytosine, guanine) make DNA molecules. Genomic data can provide valuable insights various biological processes, gene expression, genetic variation, evolutionary relationships. ’s example genomic data: example, row represents gene (genomic feature), column represents sample. values matrix represent measurement gene expression, mRNA levels protein abundance, sample. instance, value 0.1 Sample 1 Gene1 indicates expression level Gene1 Sample 1. Similarly, value 2.2 Sample 2 Gene3 indicates expression level Gene3 Sample 2. Genomic data can used various analyses, including genetic association studies, gene expression analysis, comparative genomics. context evaluate_fitness_cpp function, genomic data used calculate fitness scores individuals population, typically context genetic algorithm optimization. population represents set candidate combinations genes predictive trait. individual population represented binary vector indicating presence absence gene. example, individual population might represented [1, 0, 1], indicating presence Gene1 Gene3 absence Gene2. population undergoes genetic algorithm operations selection, crossover, mutation, replacement evolve towards individuals higher predictive power trait. fitness calculation described provided code calculates measure dissimilarity gene expression profiles individuals population genomic data. measure dissimilarity, “fitness”, quantifies well gene expression profile individual matches genomic data. Mathematically, fitness calculation can represented follows: Let: \\(g_{ijk}\\) gene expression level gene \\(j\\) individual \\(\\) sample \\(k\\) genomic data. \\(p_{ij}\\) gene expression level gene \\(j\\) individual \\(\\) population. \\(N\\) number individuals population. \\(G\\) number genes. \\(S\\) number samples. , fitness \\(F_i\\) individual \\(\\) population can calculated sum squared differences gene expression levels individual \\(\\) corresponding gene expression levels genomic data, across genes samples: \\[ F_i = \\sum_{j=1}^{G} \\sum_{k=1}^{S} (g_{ijk} - p_{ij})^2 \\] fitness calculation aims minimize overall dissimilarity gene expression profiles individuals population genomic data. Individuals lower fitness scores considered gene expression profiles similar genomic data therefore likely selected optimization genetic algorithm.","code":"# Load the BioGA package library(BioGA)  # Define parameters for genetic algorithm population_size <- 100 generations <- 6 mutation_rate <- 0.1  # Generate example genomic data genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) Sample 1   Sample 2   Sample 3   Sample 4 Gene1    0.1        0.2        0.3        0.4 Gene2    1.2        1.3        1.4        1.5 Gene3    2.3        2.2        2.1        2.0 # Initialize population population <- initialize_population_cpp(genomic_data, population_size = 5) # Initialize fitness history fitness_history <- list()  # Initialize time progress start_time <- Sys.time()  # Run genetic algorithm optimization generation <- 0 while (TRUE) {     generation <- generation + 1          # Evaluate fitness     fitness <- evaluate_fitness_cpp(genomic_data, population)     fitness_history[[generation]] <- fitness          # Check termination condition     if (generation==generations) { # defined number of generations         break     }          # Selection     selected_parents <- selection_cpp(population, fitness, num_parents = 2)      # Crossover and Mutation     offspring <- crossover_cpp(selected_parents, offspring_size = 2)     mutated_offspring <- mutation_cpp(offspring, mutation_rate = 0) # (no mutation in this example)      # Replacement     population <- replacement_cpp(population, mutated_offspring, num_to_replace = 1)          # Calculate time progress     elapsed_time <- difftime(Sys.time(), start_time, units = \"secs\")          # Print time progress     cat(\"\\rGeneration:\", generation, \"- Elapsed Time:\", format(elapsed_time, units = \"secs\"), \"     \") } #>  Generation: 1 - Elapsed Time: 0.008136749 secs       Generation: 2 - Elapsed Time: 0.008934021 secs       Generation: 3 - Elapsed Time: 0.009027719 secs       Generation: 4 - Elapsed Time: 0.009109259 secs       Generation: 5 - Elapsed Time: 0.009189606 secs # Plot fitness change over generations plot_fitness_history(fitness_history)"},{"path":"https://danymukesha.github.io/BioGA/articles/Usage.html","id":"genetic-algorithm-optimization-vignette","dir":"Articles","previous_headings":"","what":"Genetic Algorithm Optimization Vignette","title":"Usage","text":"vignette provides step--step explanation genetic algorithm optimization process using BioGA package.","code":""},{"path":"https://danymukesha.github.io/BioGA/articles/Usage.html","id":"chapter-1-initialization","dir":"Articles","previous_headings":"Genetic Algorithm Optimization Vignette","what":"Chapter 1: Initialization","title":"Usage","text":"","code":"# Load the BioGA package library(BioGA)  # Example genomic data genomic_data <- matrix(rnorm(50), nrow = 10, ncol = 10)  # Initialize population population <- initialize_population_cpp(genomic_data, population_size = 5)  # Initialize fitness history fitness_history <- list()  # Initialize time progress start_time <- Sys.time()"},{"path":"https://danymukesha.github.io/BioGA/articles/Usage.html","id":"chapter-2-genetic-algorithm-optimization","dir":"Articles","previous_headings":"Genetic Algorithm Optimization Vignette","what":"Chapter 2: Genetic Algorithm Optimization","title":"Usage","text":"","code":"# Run genetic algorithm optimization generation <- 0 while (TRUE) {     generation <- generation + 1          # Evaluate fitness     fitness <- evaluate_fitness_cpp(genomic_data, population)     fitness_history[[generation]] <- fitness          # Check termination condition     if (generation==6) {         break     }          # Selection     selected_parents <- selection_cpp(population, fitness, num_parents = 2)      # Crossover and Mutation     offspring <- crossover_cpp(selected_parents, offspring_size = 2)     mutated_offspring <- mutation_cpp(offspring, mutation_rate = 0) # (no mutation in this example)      # Replacement     population <- replacement_cpp(population, mutated_offspring, num_to_replace = 1)          # Calculate time progress     elapsed_time <- difftime(Sys.time(), start_time, units = \"secs\")          # Print time progress     cat(\"\\rGeneration:\", generation, \"- Elapsed Time:\", format(elapsed_time, units = \"secs\"), \"     \") } #>  Generation: 1 - Elapsed Time: 0.07045913 secs       Generation: 2 - Elapsed Time: 0.07125974 secs       Generation: 3 - Elapsed Time: 0.07135463 secs       Generation: 4 - Elapsed Time: 0.07143474 secs       Generation: 5 - Elapsed Time: 0.07151246 secs"},{"path":"https://danymukesha.github.io/BioGA/articles/Usage.html","id":"chapter-3-results-visualization","dir":"Articles","previous_headings":"Genetic Algorithm Optimization Vignette","what":"Chapter 3: Results Visualization","title":"Usage","text":"vignette demonstrates implement genetic algorithm optimization process using BioGA package, initialization results visualization.","code":"# Plot fitness change over generations plot_fitness_history(fitness_history)"},{"path":"https://danymukesha.github.io/BioGA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dany Mukesha. Author, maintainer.","code":""},{"path":"https://danymukesha.github.io/BioGA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mukesha D (2024). BioGA: Bioinformatics Genetic Algorithm (BioGA). R package version 0.1.0, https://danymukesha.github.io/BioGA/.","code":"@Manual{,   title = {BioGA: Bioinformatics Genetic Algorithm (BioGA)},   author = {Dany Mukesha},   year = {2024},   note = {R package version 0.1.0},   url = {https://danymukesha.github.io/BioGA/}, }"},{"path":"https://danymukesha.github.io/BioGA/index.html","id":"bioga-","dir":"","previous_headings":"","what":"Bioinformatics Genetic Algorithm (BioGA)","title":"Bioinformatics Genetic Algorithm (BioGA)","text":"BioGA package provides set functions genetic algorithm optimization tailored analyzing high throughput genomic data. functions implemented C++ improved speed efficiency, easy--use interface use within R.","code":""},{"path":"https://danymukesha.github.io/BioGA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bioinformatics Genetic Algorithm (BioGA)","text":"can install package directly GitHub using devtools package:","code":"devtools::install_github(\"danymukesha/BioGA\") #> Downloading GitHub repo danymukesha/BioGA@HEAD #> -- R CMD build ---------------------------------------------------------------------------------------------------------------- #>          checking for file 'C:\\Users\\dany.mukesha\\AppData\\Local\\Temp\\RtmpKsciOD\\remotes35a879dd6114\\danymukesha-BioGA-1917033/DESCRIPTION' ...  v  checking for file 'C:\\Users\\dany.mukesha\\AppData\\Local\\Temp\\RtmpKsciOD\\remotes35a879dd6114\\danymukesha-BioGA-1917033/DESCRIPTION' (369ms) #>       -  preparing 'BioGA': #>    checking DESCRIPTION meta-information ...     checking DESCRIPTION meta-information ...   v  checking DESCRIPTION meta-information #> -  cleaning src #>       -  checking for LF line-endings in source and make files and shell scripts #>       -  checking for empty or unneeded directories #>      Removed empty directory 'BioGA/vignettes' #>    Omitted 'LazyData' from DESCRIPTION #>       -  building 'BioGA_0.1.0.tar.gz' #>       #>  #> Warning: package 'BioGA' is in use and will not be installed"},{"path":"https://danymukesha.github.io/BioGA/reference/BioGA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BioGA: Bioinformatics Genetic Algorithm (BioGA) — BioGA-package","title":"BioGA: Bioinformatics Genetic Algorithm (BioGA) — BioGA-package","text":"Genetic algorithm class optimization algorithms inspired process natural selection genetics. package allows users analyze optimize high throughput genomic data using genetic algorithms.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/BioGA/reference/BioGA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BioGA: Bioinformatics Genetic Algorithm (BioGA) — BioGA-package","text":"Maintainer: Dany Mukesha danymukesha@gmail.com (ORCID)","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to perform crossover between selected individuals — crossover_cpp","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"Function perform crossover selected individuals","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"","code":"crossover_cpp(selected_parents, offspring_size)"},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"selected_parents Numeric matrix representing selected individuals. offspring_size Number offspring generate.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"Numeric matrix representing offspring.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/crossover_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to perform crossover between selected individuals — crossover_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data, population_size = 5) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population) selected_parents <- BioGA::selection_cpp(population, fitness, num_parents = 2) BioGA::crossover_cpp(selected_parents, offspring_size = 2) #>            [,1]      [,2]      [,3]       [,4]     [,5]     [,6]       [,7] #> [1,] -0.5536994 -0.138086 -0.530429 -0.1285274 1.318293 1.129473 -0.8876431 #> [2,] -0.5536994 -0.138086 -0.530429 -0.1285274 1.318293 1.129473 -0.8876431 #>           [,8]       [,9]      [,10] #> [1,] 0.3335553 -0.3373336 -0.3323283 #> [2,] 0.3335553 -0.3373336 -0.3323283"},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"Function evaluate fitness using genomic data","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"","code":"evaluate_fitness_cpp(genomic_data, population)"},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"genomic_data Numeric matrix genomic data rows represent genes/features columns represent samples. population Numeric matrix representing population individuals.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"Numeric vector fitness scores individual.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/evaluate_fitness_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to evaluate fitness using genomic data — evaluate_fitness_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data, population_size = 5) BioGA::evaluate_fitness_cpp(genomic_data, population) #> [1] 150.2454 132.2268 209.2902 141.7011 149.0990"},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to initialize the population from genomic data — initialize_population_cpp","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"Function initialize population genomic data","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"","code":"initialize_population_cpp(genomic_data, population_size)"},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"genomic_data Numeric matrix genomic data rows represent genes/features columns represent samples. population_size Number individuals population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"Numeric matrix representing initialized population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/initialize_population_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to initialize the population from genomic data — initialize_population_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) BioGA::initialize_population_cpp(genomic_data, population_size = 5) #>            [,1]        [,2]        [,3]       [,4]         [,5]       [,6] #> [1,] -1.1533984 -0.07557425  0.04020439 -0.2721537  0.007886198 1.12983515 #> [2,] -0.4293801 -0.91905160 -0.01030332 -1.5625184 -0.998432551 1.23339006 #> [3,] -0.4293801 -0.22174452  1.10018974  0.1243011 -2.446680029 0.07510590 #> [4,] -1.1533984  1.31763370  0.74702859  1.2037678  0.007886198 0.06548664 #> [5,] -0.4293801 -0.50359291 -0.01030332  0.3224827  0.542141549 0.07510590 #>             [,7]       [,8]       [,9]      [,10] #> [1,] -1.09850890  0.6752447  1.1533758  2.6489320 #> [2,]  0.55851442 -0.6331782  0.7087531  2.1122773 #> [3,]  0.34042449  0.7097145 -1.4522998  0.9412061 #> [4,]  0.00312594  0.8767773 -0.6048294 -0.3837330 #> [5,] -1.09850890 -0.4727025  1.1533758  0.1289229"},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to mutate the offspring — mutation_cpp","title":"Function to mutate the offspring — mutation_cpp","text":"Function mutate offspring","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to mutate the offspring — mutation_cpp","text":"","code":"mutation_cpp(offspring, mutation_rate)"},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to mutate the offspring — mutation_cpp","text":"offspring Numeric matrix representing offspring. mutation_rate Probability mutation individual.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to mutate the offspring — mutation_cpp","text":"Numeric matrix representing mutated offspring.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/mutation_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to mutate the offspring — mutation_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data, population_size = 5) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population) selected_parents <- BioGA::selection_cpp(population, fitness, num_parents = 2) offspring <- BioGA::crossover_cpp(selected_parents, offspring_size = 2) BioGA::mutation_cpp(offspring, mutation_rate = 0) #>            [,1]      [,2]      [,3]       [,4]     [,5]       [,6]      [,7] #> [1,] -0.3561244 0.3944171 0.3510694 0.05339588 0.295868 0.04213411 0.5120214 #> [2,] -0.3561244 0.3944171 0.3510694 0.05339588 0.295868 0.04213411 0.5120214 #>           [,8]       [,9]   [,10] #> [1,] 0.4615277 -0.4731714 0.49262 #> [2,] 0.4615277 -0.4731714 0.49262"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Fitness Values — plot_fitness","title":"Plot Fitness Values — plot_fitness","text":"Plot fitness values population generations.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Fitness Values — plot_fitness","text":"","code":"plot_fitness(fitness_values)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Fitness Values — plot_fitness","text":"fitness_values numeric vector containing fitness values.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Fitness Values — plot_fitness","text":"Plot fitness","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Fitness Values — plot_fitness","text":"","code":"# example of usage fitness_values <- c(10, 8, 6, 4, 2) plot_fitness(fitness_values)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Fitness Change Over Generations — plot_fitness_history","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"Plot change fitness values generations.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"","code":"plot_fitness_history(fitness_history)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"fitness_history list containing fitness values generation.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"Plot fitness history","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_fitness_history.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Fitness Change Over Generations — plot_fitness_history","text":"","code":"# example of usage fitness_history <- list(c(10, 8, 6, 4, 2), c(9, 7, 5, 3, 1)) plot_fitness_history(fitness_history)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Population Distribution — plot_population","title":"Plot Population Distribution — plot_population","text":"Plot distribution individuals population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Population Distribution — plot_population","text":"","code":"plot_population(population)"},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Population Distribution — plot_population","text":"population numeric matrix containing population data.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Population Distribution — plot_population","text":"Plot population","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/plot_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Population Distribution — plot_population","text":"","code":"# example of usage population <- matrix(runif(100), nrow = 10, ncol = 10) plot_population(population)"},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to replace non-selected individuals in the population — replacement_cpp","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"Replace non-selected individuals population","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"","code":"replacement_cpp(population, offspring, num_to_replace)"},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"population Numeric matrix representing population individuals. offspring Numeric matrix representing offspring. num_to_replace Number individuals replace.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"Numeric matrix representing updated population.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/replacement_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to replace non-selected individuals in the population — replacement_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data, population_size = 5) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population) selected_parents <- BioGA::selection_cpp(population, fitness, num_parents = 2) offspring <- BioGA::crossover_cpp(selected_parents, offspring_size = 2) mutated_offspring <- BioGA::mutation_cpp(offspring, mutation_rate = 0) BioGA::replacement_cpp(population, mutated_offspring, num_to_replace = 1) #>            [,1]        [,2]       [,3]       [,4]       [,5]        [,6] #> [1,] -0.7307786  0.66217880 -0.4473445 -0.6274346 -0.9239379 -0.03981704 #> [2,]  1.8134543 -0.08382568  0.5288647  0.5502105 -0.5064189 -0.65940348 #> [3,] -0.6295885  0.66217880  0.7488550 -0.7740868 -0.9239379 -0.03981704 #> [4,] -0.2619656  2.65489833 -0.5072482 -0.4234901  0.5496843  0.72399496 #> [5,] -0.7115241 -0.26514740  0.7488550 -1.4107009  1.4893004 -0.65954237 #>            [,7]       [,8]       [,9]      [,10] #> [1,]  0.9042691 -2.8080105  0.4859931 -1.3333958 #> [2,] -0.5816520 -0.1222859  1.1797842  0.6410374 #> [3,] -0.5933997 -0.3335997  1.6418480  0.6410374 #> [4,] -0.5816520  0.3621591 -1.2588272 -2.0600707 #> [5,]  0.9042691  0.3621591 -0.9122598  1.1279266"},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to select individuals based on fitness scores — selection_cpp","title":"Function to select individuals based on fitness scores — selection_cpp","text":"Function select individuals based fitness scores","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to select individuals based on fitness scores — selection_cpp","text":"","code":"selection_cpp(population, fitness, num_parents)"},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to select individuals based on fitness scores — selection_cpp","text":"population Numeric matrix representing population individuals. fitness Numeric vector fitness scores individual. num_parents Number individuals select.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to select individuals based on fitness scores — selection_cpp","text":"Numeric matrix representing selected individuals.","code":""},{"path":"https://danymukesha.github.io/BioGA/reference/selection_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to select individuals based on fitness scores — selection_cpp","text":"","code":"# example of usage genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10) population <- BioGA::initialize_population_cpp(genomic_data, population_size = 5) fitness <- BioGA::evaluate_fitness_cpp(genomic_data, population) BioGA::selection_cpp(population, fitness, num_parents = 2) #>            [,1]       [,2]       [,3]       [,4]       [,5]       [,6] #> [1,] -0.7510122 -0.1621165 -0.9459850  0.2890896 -0.5062863 -0.1090417 #> [2,] -0.1742460 -2.4536474  0.4179257 -0.2890583  0.8159494 -0.1214508 #>             [,7]       [,8]        [,9]      [,10] #> [1,]  0.76590680 -0.8940268 -0.04642821 -0.4711791 #> [2,] -0.03705146 -1.4372467 -0.13694343 -0.5149020"}]
