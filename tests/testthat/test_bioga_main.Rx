library(BioGA)
library(testthat)

test_that("bioga_main_cpp returns list with correct structure and valid results", {
    genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10)
    population_size <- 5
    num_generations <- 10
    crossover_rate <- 0.9
    mutation_rate <- 0.1
    num_parents <- 2
    num_offspring <- 2
    num_to_replace <- 1
    weights <- c(1.0, 0.5)
    seed <- 123
    
    result <- BioGA::bioga_main_cpp(genomic_data, population_size, num_generations, 
                                    crossover_rate, mutation_rate, num_parents, 
                                    num_offspring, num_to_replace, weights, seed)
    
    # output structure
    expect_true(is.list(result))
    expect_true(all(c("population", "fitness") %in% names(result)))
    
    # population dimensions
    expect_equal(nrow(result$population), population_size)
    expect_equal(ncol(result$population), nrow(genomic_data))
    
    # fitness dimensions
    expect_equal(nrow(result$fitness), population_size)
    expect_equal(ncol(result$fitness), length(weights))
    
    # for no warnings or errors
    expect_no_warning(BioGA::bioga_main_cpp(genomic_data, population_size, num_generations, 
                                            crossover_rate, mutation_rate, num_parents, 
                                            num_offspring, num_to_replace, weights, seed),
                      message = "bioga_main_cpp should not produce warnings")
    expect_no_error(BioGA::bioga_main_cpp(genomic_data, population_size, num_generations, 
                                          crossover_rate, mutation_rate, num_parents, 
                                          num_offspring, num_to_replace, weights, seed),
                    message = "bioga_main_cpp should not produce errors")
})

test_that("bioga_main_cpp handles network and cluster inputs", {
    # test data
    genomic_data <- matrix(rnorm(100), nrow = 10, ncol = 10)
    population_size <- 5
    num_generations <- 5
    crossover_rate <- 0.9
    mutation_rate <- 0.1
    num_parents <- 2
    num_offspring <- 2
    num_to_replace <- 1
    weights <- c(1.0, 0.5)
    clusters <- rep(1:2, each = 5)
    network <- matrix(0, nrow = 10, ncol = 10)
    
    # the function with clusters and network
    result <- BioGA::bioga_main_cpp(
        genomic_data,
        population_size,
        num_generations,
        crossover_rate,
        eta_c = 20.0,
        mutation_rate,
        num_parents,
        num_offspring,
        num_to_replace,
        weights = weights,
        clusters = clusters,
        network = network
    )
    
    # output structure
    expect_true(is.list(result))
    expect_equal(nrow(result$population), population_size)
    expect_equal(ncol(result$population), nrow(genomic_data))
    expect_equal(nrow(result$fitness), population_size)
    expect_equal(ncol(result$fitness), length(weights))
})

test_that("bioga_main_cpp handles edge cases", {
    # minimal input
    genomic_data <- matrix(1.0, nrow = 1, ncol = 1)
    result <- BioGA::bioga_main_cpp(
        genomic_data,
        population_size = 1,
        num_generations = 1,
        crossover_rate = 0.0,
        mutation_rate = 0.0,
        num_parents = 1,
        num_offspring = 1,
        num_to_replace = 0,
        weights = c(1.0)
    )
    expect_true(is.list(result))
    expect_equal(nrow(result$population), 1)
    expect_equal(ncol(result$population), 1)
    expect_equal(nrow(result$fitness), 1)
    expect_equal(ncol(result$fitness), 1)
})